import telebot
from telebot.types import ChatPermissions
import requests
import random
import os
from telebot.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardButton, InlineKeyboardMarkup
from datetime import datetime, timedelta, date
import time
import atexit
from telebot import TeleBot, types
import pytz
import threading
from threading import Timer
import json
import re
import traceback
import schedule
from telebot.apihelper import ApiException
from collections import defaultdict
from apscheduler.schedulers.background import BackgroundScheduler
from apscheduler.triggers.cron import CronTrigger

#=====================--------------(TOKEN BOT @FATHER)--------------=====================
API_BOT = '7975395053:AAE6xhLQ-y6BJTlvrNgWjOOWSnZMZ40AxTw'
bot = telebot.TeleBot(API_BOT, parse_mode=None)

user_balance = {}
gitcode_amounts = {}
used_gitcodes = []
user_state = {}
user_bet_history = {}
user_bets = {}
code_timers = {}
daily_earnings = {}
clicked_links = {}
clicked_referral_links = set()
user_referrals = {}
USERCODE_FILE = "usercode.json"

def convert_to_vietnam_timezone(utc_datetime):
    vietnam_timezone = pytz.timezone('Asia/Ho_Chi_Minh')
    return utc_datetime.astimezone(vietnam_timezone)

#Th√¥ng b√°o nh√≥m
group_chat_id = -1002781947864

#=====================--------------(Kho L∆∞u S·ªë D∆∞)--------------=====================

def save_balance_to_file():
    with open("sodu.txt", "w") as f:
        for user_id, balance in user_balance.items():
            balance_int = int(balance)
            f.write(f"{user_id} {balance_int}\n")


def load_balance_from_file():
    if os.path.exists("sodu.txt"):
        with open("sodu.txt", "r") as f:
            for line in f:
                if line.strip():
                    user_id, balance_str = line.strip().split()
                    balance = float(balance_str)
                    if balance.is_integer():
                        balance = int(balance)
                    user_balance[int(user_id)] = balance


def initialize_user_balance():
    if not user_balance:
        load_balance_from_file()


initialize_user_balance()


def on_exit():
    save_balance_to_file()


atexit.register(on_exit)


scheduler = BackgroundScheduler(timezone='Asia/Ho_Chi_Minh')


@scheduler.scheduled_job(CronTrigger(hour=0, minute=0))
def refresh_daily():
    open("topngay.json", "w").close()


@scheduler.scheduled_job(CronTrigger(day_of_week='mon', hour=0, minute=0))
def refresh_weekly():
    open("toptuan.json", "w").close()

scheduler.start()

def save_clicked_links_to_file():
  with open("clicked_links.txt", "w") as file:
      for user_id, links in clicked_links.items():
          file.write(f"{user_id}:{','.join(map(str, links))}\n")

def load_clicked_links_from_file():
  try:
      with open("clicked_links.txt", "r") as file:
          for line in file:
              user_id, links_str = line.strip().split(':')
              clicked_links[int(user_id)] = list(map(int, links_str.split(',')))
  except FileNotFoundError:
      pass 

load_clicked_links_from_file()

#=====================--------------(Api)--------------=====================


def send_dice(chat_id):
    response = requests.get(
        f'https://api.telegram.org/bot{API_BOT}/sendDice?chat_id={chat_id}')
    if response.status_code == 200:
        data = response.json()
        if 'result' in data and 'dice' in data['result']:
            return data['result']['dice']['value']
    return None


def calculate_tai_xiu(total_score):
    return "T√†i" if 11 <= total_score <= 18 else "X·ªâu"


def chan_le_result(total_score):
    return "Ch·∫µn" if total_score % 2 == 0 else "L·∫ª"


#=====================--------------(Gitcode)--------------=====================

GITCODE_FILE = "gitcode.txt"


def create_gitcode(amount):
    gitcode = ''.join(
        random.choices('abcdefghiklmNOPQRSTUVWXYZ0321654987', k=8))
    gitcode_amounts[gitcode] = amount
    save_gitcodes_to_file()
    return gitcode


def remove_gitcode(gitcode):
    if gitcode in gitcode_amounts:
        del gitcode_amounts[gitcode]
        save_gitcodes_to_file()


def save_gitcodes_to_file():
    with open(GITCODE_FILE, "w") as f:
        for code, value in gitcode_amounts.items():
            f.write(f"{code}:{value}\n")


def read_gitcodes():
    if not os.path.exists(GITCODE_FILE):
        return
    with open(GITCODE_FILE, "r") as f:
        for line in f:
            gitcode, amount = line.strip().split(":")
            gitcode_amounts[gitcode] = int(amount)


read_gitcodes()


@bot.message_handler(commands=['regcode'])
def create_gitcode_handler(message):
    if message.from_user.id != 6915752059:
        bot.reply_to(message, "‚ö†Ô∏è B·∫°n kh√¥ng c√≥ quy·ªÅn th·ª±c hi·ªán thao t√°c n√†y.")
        return
    command_parts = message.text.split(' ')
    if len(command_parts) == 2:
        try:
            amount = int(command_parts[1])
            process_gitcode_amount(message, amount)
        except ValueError:
            bot.reply_to(message, "S·ªë ti·ªÅn kh√¥ng h·ª£p l·ªá.")
    else:
        bot.reply_to(message,
                     "Vui l√≤ng nh·∫≠p ƒë√∫ng ƒë·ªãnh d·∫°ng /regcode [s·ªë ti·ªÅn].")


def process_gitcode_amount(message, amount):
    try:
        formatted_amount = "{:,.0f}".format(amount).replace(".", ",")
        gitcode = create_gitcode(amount)
        bot.reply_to(
            message,
            f"B·∫°n ƒë√£ t·∫°o th√†nh c√¥ng gifcode, Gitcode c·ªßa b·∫°n l√†: [ <code>{gitcode}</code> ] c√≥ s·ªë ti·ªÅn {formatted_amount} ƒë·ªìng.",
            parse_mode='HTML')
    except ValueError:
        bot.reply_to(message, "S·ªë ti·ªÅn kh√¥ng h·ª£p l·ªá.")


@bot.message_handler(commands=['code'])
def naptien_gitcode(message):
    command_parts = message.text.split(' ')
    if len(command_parts) == 2:
        gitcode = command_parts[1].strip()
        process_naptien_gitcode(message, gitcode)
    else:
        bot.reply_to(message, "Vui l√≤ng nh·∫≠p ƒë√∫ng ƒë·ªãnh d·∫°ng /code [m√£ code].")


def process_naptien_gitcode(message, gitcode):
    user_id = message.from_user.id
    current_date = datetime.now().strftime("%Y-%m-%d")
    
    user_data = {}
    if os.path.exists(USERCODE_FILE):
        with open(USERCODE_FILE, "r") as f:
            user_data = json.load(f)

    if current_date in user_data:
        if str(user_id) in user_data[current_date]:
            if user_data[current_date][str(user_id)] >= 3:
                bot.reply_to(message, "B·∫°n ƒë√£ nh·∫≠p ƒë·ªß 3 code trong ng√†y h√¥m nay.")
                return
        else:
            user_data[current_date][str(user_id)] = 1
    else:
        user_data[current_date] = {str(user_id): 1}

    user_data[current_date][str(user_id)] += 1

    with open(USERCODE_FILE, "w") as f:
        json.dump(user_data, f)
        
    if gitcode in gitcode_amounts:
        amount = gitcode_amounts[gitcode]

        if gitcode not in used_gitcodes:
            used_gitcodes.append(gitcode)

            if user_id not in user_balance:
                user_balance[user_id] = 0
            user_balance[user_id] += amount

            bot.reply_to(
                message,
                f"<b>üéâ Nh·∫≠p Giftcode Th√†nh C√¥ng\nGi√° Tr·ªã Code B·∫°n V·ª´a Nh·∫≠p L√†: {int(amount):,}.</b>"
            , parse_mode='HTML')

            bot.send_message(
                group_chat_id, f"""
<pre>Th√¥ng tin ng∆∞·ªùi nh·∫≠p gidcode
Ng∆∞·ªùi ch∆°i: {message.from_user.first_name} 
User: {user_id}
S·ªë d∆∞: {amount:,}ƒë.</pre>""", parse_mode='HTML')
            encoded_user_id = f"**{str(user_id)[-4:]}**"
            bot3.send_message(
                group_chat_id2, f"""
<b>üéâ Ch√∫c M·ª´ng ID: {encoded_user_id} v·ª´a nh·∫≠p code th√†nh c√¥ng, Gi√° tr·ªã code: {int(amount):,}</b>""", parse_mode='HTML')

            save_balance_to_file()
            remove_gitcode(gitcode)
        else:
            bot.reply_to(message,
                         "Gitcode ƒë√£ s·ª≠ d·ª•ng. Vui l√≤ng nh·∫≠p Gitcode kh√°c.")
    else:
        bot.reply_to(message, "Gitcode kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng.")


@bot.message_handler(commands=['muacode'])
def mua_code(message):
    try:
        args = message.text.split()
        if len(args) != 3:
            bot.reply_to(message, "C√°ch d√πng: /muacode <s·ªë l∆∞·ª£ng> <s·ªë ti·ªÅn>")
            return

        quantity = int(args[1])
        amount_per_code = int(args[2])

        user_id = message.from_user.id
        total_cost = quantity * amount_per_code
        fee = total_cost * 0.05
        total_amount = total_cost + fee

        if user_id not in user_balance or user_balance[user_id] < total_amount:
            bot.reply_to(message, "B·∫°n kh√¥ng c√≥ ƒë·ªß s·ªë d∆∞ ƒë·ªÉ ho√†n t·∫•t giao d·ªãch n√†y.")
            return

        user_balance[user_id] -= total_amount

        gitcodes = [create_gitcode(amount_per_code) for _ in range(quantity)]

        save_balance_to_file()
        save_gitcodes_to_file()

        total_deducted = total_cost + fee
        codes_message = ""
        for i, (gitcode, code_value) in enumerate(zip(gitcodes, [amount_per_code]*quantity), start=1):
            codes_message += f"Code {i}: <code>/code {gitcode}</code> - Gi√° tr·ªã code: {int(code_value):,}\n"

        bot.reply_to(message, f"<b>·∫§n v√†o code ƒë·ªÉ sao ch√©p nhanh\nƒê√£ mua th√†nh c√¥ng {quantity} m√£ code.\n\nT·ªïng s·ªë ti·ªÅn ƒë√£ mua (k√®m ph√≠ 5%): {int(total_deducted):,}\nS·ªë d∆∞ sau khi mua: {int(user_balance[user_id]):,}.\n\n{codes_message}</b>", parse_mode='HTML')

    except Exception as e:
        bot.reply_to(message, f"L·ªói bot vui l√≤ng mua l·∫°i: {str(e)}")
        traceback.print_exc()


@bot.message_handler(commands=['phatcode'])
def phatcode(message):
    if message.from_user.id != 6915752059:
        bot.reply_to(message, "B·∫°n kh√¥ng c√≥ quy·ªÅn th·ª±c hi·ªán l·ªánh n√†y.")
        return

    command = message.text.split()
    if len(command) != 5:
       pass

    try:
        quantity = int(command[1])
        amount = int(command[2])
        interval = int(command[3])

        schedule_code_distribution(quantity, amount, interval)

        bot.reply_to(message, f"ƒê√£ l·∫≠p l·ªãch ph√°t {quantity} code, m·ªói code c√≥ gi√° tr·ªã {amount} trong kho·∫£ng {interval} gi√¢y.")
    except ValueError:
        pass

def distribute_code(quantity, amount, chat_id):
    codes_message = "<blockquote>üéÅ Th√¥ng b√°o ph√°t code sau m·ªói gi·ªù c·ªßa h·ªá th·ªëng</blockquote>\n"
    for i in range(1, quantity + 1):
        code = create_gitcode(amount)
        codes_message += f"<b>{i}: <code>/code {code}</code> (Gi√° tr·ªã: {int(amount):,})</b>\n\n"

    bot3.send_message(chat_id, codes_message, reply_markup=nhancode(), parse_mode='HTML')

def schedule_code_distribution(quantity, amount, interval):
    chat_id = group_chat_id2

    code_timers[chat_id] = Timer(interval, distribute_code, args=(quantity, amount, chat_id))
    code_timers[chat_id].start()

def nhancode():

    markup = telebot.types.InlineKeyboardMarkup(row_width=1)

    markup.add(
        telebot.types.InlineKeyboardButton("üëâ Nh·∫≠p code t·∫°i bot üëà",
                                           url="https://t.me/toolviphahaa")),

    return markup

@bot.message_handler(commands=["start"])
def show_main_menu(msg):
    user_id = msg.from_user.id

    if user_id not in user_balance:
        user_balance[user_id] = 0  
        save_balance_to_file()  

    if msg.text.startswith('/start ') and len(msg.text.split()) > 1:
        referrer_id = int(msg.text.split()[1])

        if referrer_id in user_balance and user_id not in clicked_referral_links:
            bonus_amount = 0
            user_balance[referrer_id] += bonus_amount
            daily_earnings.setdefault(referrer_id, 0)
            daily_earnings[referrer_id] += bonus_amount
            clicked_referral_links.add(user_id)
            user_referrals.setdefault(referrer_id, []).append(user_id)
            save_balance_to_file()

            bot.send_message(referrer_id, f"üéâ B·∫°n ƒë√£ nh·∫≠n ƒë∆∞·ª£c 0 ƒë·ªìng t·ª´ l∆∞·ª£t ƒë·∫∑t c∆∞·ª£c c·ªßa ng∆∞·ªùi ch∆°i m·ªõi ({msg.from_user.first_name}).")
        else:
            bot.send_message(user_id, "‚ùå Ng∆∞·ªùi gi·ªõi thi·ªáu kh√¥ng h·ª£p l·ªá ho·∫∑c b·∫°n ƒë√£ nh·∫•p v√†o li√™n k·∫øt r·ªìi.")

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    rows = [
        ["üë§ T√†i kho·∫£n", "üé≤ Danh s√°ch game"],
        ["üßëüèº‚Äçüíª H·ªó tr·ª£", "üå∫ Hoa h·ªìng"],
        ["üéñ ƒêua top"],
    ]

    for row in rows:
        markup.row(*[types.KeyboardButton(button_text) for button_text in row])

    photo_url = "https://i.imgur.com/DMHBMRn.jpeg"
    caption = """
<b>Ch√†o M·ª´ng B·∫°n ƒê√£ ƒê·∫øn V·ªõi S√¢n Ch∆°i Gi·∫£i Tr√≠</b>

¬†¬†¬†¬†     <code>LUXURY ROOM T√ÄI X·ªàU VIP</code>

<b>Game Xanh Ch√≠n N√≥i Kh√¥ng V·ªõi Ch·ªânh C·∫ßu</b>

<b>üëâ C√°ch ch∆°i ƒë∆°n gi·∫£n, ti·ªán l·ª£i üéÅ</b>

<b>üëâ N·∫°p r√∫t nhanh ch√≥ng, ƒëa d·∫°ng h√¨nh th·ª©c üí∏</b>

<b>üëâ C√≥ Nhi·ªÅu Ph·∫ßn Qu√† D√†nh Cho Ng∆∞·ªùi Ch∆°i M·ªõi ü§ù</b>

<b>üëâ ƒêua top th·∫≠t hƒÉng, nh·∫≠n qu√† c·ª±c cƒÉng üíç</b>

<b>üëâ An to√†n, b·∫£o m·∫≠t tuy·ªát ƒë·ªëi üèÜ</b>

<b>‚ö†Ô∏è Ch√∫ √Ω ƒë·ªÅ ph√≤ng l·ª´a ƒë·∫£o, Ch√∫ng T√¥i Kh√¥ng inbox Tr∆∞·ªõc ‚ö†Ô∏è</b>
"""
    bot.send_photo(msg.chat.id,
                   photo_url,
                   caption=caption,
                   reply_markup=markup,
                   parse_mode='HTML')



@bot.message_handler(func=lambda message: message.text == "üë§ T√†i kho·∫£n")
def handle_check_balance_button(msg):
    check_balance(msg)


@bot.message_handler(func=lambda message: message.text == "üé≤ Danh s√°ch game")
def handle_game_list_button(msg):
    show_game_options(msg)


@bot.message_handler(func=lambda message: message.text == "üßëüèº‚Äçüíª H·ªó tr·ª£")
def handle_1_list_button(msg):
    show_admin_hotro(msg)



@bot.message_handler(func=lambda message: message.text == "üå∫ Hoa h·ªìng")
def handle_2_list_button(msg):
    show_friend_options(msg)

@bot.message_handler(func=lambda message: message.text == "üéñ ƒêua top")
def handle_3_list_button(msg):
    show_duatop_one(msg)

def show_duatop_one(msg):
    photo_link = "https://i.imgur.com/DMHBMRn.jpeg"
    bot.send_photo(msg.chat.id,
                   photo_link,
                   caption=f"""
<blockquote>Top C∆∞·ª£c Ng√†y Tr·∫£ Th∆∞·ªüng V√†o 12h Tr∆∞a H√¥m Sau</blockquote>
<b>ü•áTop 1: 44.444</b>
<b>ü•àTop 2: 23.456</b>
<b>ü•âTop 3: 12.345</b>

<blockquote>Top C∆∞·ª£c Tu·∫ßn Tr·∫£ Th∆∞·ªüng V√†o 12h Tr∆∞a Th·ª© 2 Tu·∫ßn Sau</blockquote>
<b>ü•áTop 1: 88.888</b>
<b>ü•àTop 2: 45.678</b>
<b>ü•âTop 3: 19.999</b>

<b>Vui L√≤ng Ch·ªçn BXH ƒê·ªÉ Xem Chi Ti·∫øt</b>
          """,
                   parse_mode='HTML',
                   reply_markup=duatop())

def duatop():
    markup = telebot.types.InlineKeyboardMarkup(row_width=2)

    markup.add(
        telebot.types.InlineKeyboardButton("ü•â Top Ng√†y",
                                           callback_data="top_ngay"),
        telebot.types.InlineKeyboardButton("ü•à Top Tu·∫ßn",
                                           callback_data="top_tuan"))

    return markup

@bot.callback_query_handler(func=lambda call: call.data == 'top_ngay')
def show_top_ngay(call):
    vietnam_timezone = pytz.timezone('Asia/Ho_Chi_Minh')
    current_time_vietnam = convert_to_vietnam_timezone(datetime.now())
    formatted_date = current_time_vietnam.strftime("%d/%m/%Y")

    with open("topngaybxh.json", "r") as lichsucuoc_file:
        user_bets_dict = defaultdict(int)
        user_daily_bets = defaultdict(int)
        for line in lichsucuoc_file:
            data = json.loads(line)
            for uid, amount in data.items():
                user_bets_dict[int(uid)] += amount
                user_daily_bets[int(uid)] += amount

    top_users = sorted(user_bets_dict.items(), key=lambda x: x[1], reverse=True)[:3]

    with open("topngay.json", "w") as topngay_file:
        for i, (user_id, bet_amount) in enumerate(top_users, start=1):
            formatted_bet_amount = "{:,.0f}".format(bet_amount)
            formatted_user_id = str(user_id).ljust(10)
            topngay_file.write(f"{i} | {formatted_user_id} | {formatted_bet_amount}\n")

    message_content = f'''
Top c∆∞·ª£c ng√†y: {formatted_date}
Top | ID       | Ti·ªÅn c∆∞·ª£c
'''

    with open("topngay.json", "r") as topngay_file:
        topngay_content = topngay_file.read()
        message_content += topngay_content

    user_id = call.from_user.id
    if user_id in user_daily_bets:
        user_daily_bet_amount = "{:,.0f}".format(user_daily_bets[user_id])
        message_content += f'\n\nB·∫°n ƒë√£ c∆∞·ª£c: {user_daily_bet_amount} VND trong ng√†y.'

    bot.send_message(call.message.chat.id, message_content, parse_mode='HTML')

@bot.callback_query_handler(func=lambda call: call.data == 'top_tuan')
def show_top_tuan(call):
    with open("toptuanbxh.json", "r") as lichsucuoc_file:
        user_bets_dict = defaultdict(int)
        user_weekly_bets = defaultdict(int)
        for line in lichsucuoc_file:
            data = json.loads(line)
            for uid, amount in data.items():
                user_bets_dict[int(uid)] += amount
                user_weekly_bets[int(uid)] += amount

    top_users = sorted(user_bets_dict.items(), key=lambda x: x[1], reverse=True)[:3]

    with open("toptuan.json", "w") as toptuan_file:
        for i, (user_id, bet_amount) in enumerate(top_users, start=1):
            formatted_bet_amount = "{:,.0f}".format(bet_amount)
            formatted_user_id = str(user_id).ljust(10)
            toptuan_file.write(f"{i} | {formatted_user_id} | {formatted_bet_amount}\n")

    vietnam_timezone = pytz.timezone('Asia/Ho_Chi_Minh')
    current_time_vietnam = convert_to_vietnam_timezone(datetime.now())
    week_number = current_time_vietnam.strftime("%W")

    message_content = f'''
Top c∆∞·ª£c tu·∫ßn: {week_number}
Top | ID       | Ti·ªÅn c∆∞·ª£c
'''

    with open("toptuan.json", "r") as toptuan_file:
        toptuan_content = toptuan_file.read()
        message_content += toptuan_content

    user_id = call.from_user.id
    if user_id in user_weekly_bets:
        user_weekly_bet_amount = "{:,.0f}".format(user_weekly_bets[user_id])
        message_content += f'\n\nB·∫°n ƒë√£ c∆∞·ª£c: {user_weekly_bet_amount} VND trong tu·∫ßn.'

    bot.send_message(call.message.chat.id, message_content, parse_mode='HTML')



#=====================--------------(balance)--------------=====================

def check_balance(msg):
    user_id = msg.from_user.id
    balance = user_balance.get(user_id, 0)
    rounded_balance = round(balance)
    photo_link = "https://i.imgur.com/DMHBMRn.jpeg"
    bot.send_photo(msg.chat.id,
                   photo_link,
                   caption=f"""
üë§ <b>T√™n T√†i Kho·∫£n</b>: [ <code>{msg.from_user.first_name}</code> ]
üí≥ <b>ID T√†i Kho·∫£n</b>: [ <code>{msg.from_user.id}</code> ]
üí∞ <b>S·ªë D∆∞</b>: [ <code>{rounded_balance:,}</code> ] ƒë
          """,
                   parse_mode='HTML',
                   reply_markup=user_menu())


def user_menu():
    markup = telebot.types.InlineKeyboardMarkup(row_width=2)

    markup.add(
        telebot.types.InlineKeyboardButton("üí∏ N·∫°p ti·ªÅn",
                                           callback_data="nap_tien"),
        telebot.types.InlineKeyboardButton("üí∏ R√∫t ti·ªÅn",
                                           callback_data="rut_tien"))

    markup.add(
        telebot.types.InlineKeyboardButton("üìâ L·ªãch s·ª≠ n·∫°p",
                                           callback_data="show_history_1"),
        telebot.types.InlineKeyboardButton("üìà L·ªãch s·ª≠ r√∫t",
                                           callback_data="show_history"))

    markup.add(
        telebot.types.InlineKeyboardButton("üì¶ Nh·∫≠p gitcode",
                                           callback_data="nhan_gitcode"),
        telebot.types.InlineKeyboardButton("üéÅ Mua Gitcode",
                                           callback_data="mua_gitcode"))
    markup.add(
        telebot.types.InlineKeyboardButton("ü§ù Chuy·ªÉn ti·ªÅn",
                                           callback_data="chuyen_tien"))

    return markup


@bot.callback_query_handler(func=lambda call: call.data == 'rut_tien')
def show_menu_rut_tien(call):
    markup = telebot.types.InlineKeyboardMarkup(row_width=2)
    markup.add(
        telebot.types.InlineKeyboardButton("Momo",
                                           callback_data="rut_tien_momo"),
        telebot.types.InlineKeyboardButton("Bank",
                                           callback_data="rut_tien_bank"))
    bot.send_message(call.message.chat.id,
                     "Vui l√≤ng ch·ªçn ph∆∞∆°ng th·ª©c r√∫t ti·ªÅn",
                     reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data == 'nap_tien')
def show_menu_nap_tien(call):
    markup = telebot.types.InlineKeyboardMarkup(row_width=2)
    markup.add(
        telebot.types.InlineKeyboardButton("Momo",
                                           callback_data="nap_tien_momo"),
        telebot.types.InlineKeyboardButton("Bank",
                                           callback_data="nap_tien_bank"))
    bot.send_message(call.message.chat.id,
                     "L·ª±a ch·ªçn ph∆∞∆°ng th·ª©c n·∫°p ti·ªÅn",
                     reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data == 'nap_tien_momo')
def show_nap_tien_momo(call):
    user_id = call.from_user.id

    message_content = f'''
üìñ Th√¥ng tin chuy·ªÉn kho·∫£n [Momo] 

üèß S·ªë T√†i Kho·∫£n: <code>0366530822</code>

üèßCh·ªß T√†i Kho·∫£n: <code>NINH DIEP LINH</code>

üèß N·ªôi Dung: [ <code>{user_id}</code> ] 

üõë Vui L√≤ng Nh·∫≠p ƒê√∫ng N·ªôi Dung ƒê·ªÉ Ti·ªÅn V√†o Nhanh Nh·∫•t.
üõë Ch·ª•p L·∫°i Bill Sau M·ªói ƒê∆°n N·∫°p ! 
üõë ADMIN H·ªñ TR·ª¢ : t.me/hehetoolvip
'''
    bot.send_message(call.message.chat.id, message_content, parse_mode='HTML')


@bot.callback_query_handler(func=lambda call: call.data == 'nap_tien_bank')
def show_nap_tien_bank(call):
    user_id = call.from_user.id

    message_content = f'''
üå∏ K√äNH N·∫†P TI·ªÄN üí∏

üìñ Th√¥ng tin chuy·ªÉn kho·∫£n [Bank] 

üèß Ng√¢n H√†ng: MB BANK

üèß STK: <code>0939766383</code>

üèß CTK: <code>Nguyen Huynh Nhut Quang</code>

üèß N·ªôi Dung: [ <code>{user_id}</code> ] 

üõë Vui L√≤ng Nh·∫≠p ƒê√∫ng N·ªôi Dung ƒê·ªÉ Ti·ªÅn V√†o Nhanh Nh·∫•t.
üõë Ch·ª•p L·∫°i Bill Sau M·ªói ƒê∆°n N·∫°p ! 
üõë ADMIN H·ªñ TR·ª¢ : t.me/heheviptool
'''

    bot.send_message(call.message.chat.id, message_content, parse_mode='HTML')


@bot.callback_query_handler(func=lambda call: call.data == 'nhan_gitcode')
def show_nhan_gitcode(call):

    bot.send_message(
        call.message.chat.id, f'''
<b>üóÇ ƒê·ªÉ Nh·∫≠p Giftcode, Vui L√≤ng Th·ª±c Hi·ªán Theo C√∫ Ph√°p Sau:</b>

<b>/code [d·∫•u c√°ch] m√£ giftcode</b>

<b>‚ô®Ô∏è VD:¬†¬†/code LUXURY2025</b>
''', parse_mode='HTML')


@bot.callback_query_handler(func=lambda call: call.data == 'chuyen_tien')
def show_chuyen_tien(call):

    bot.send_message(
        call.message.chat.id, f'''
<blockquote>üí∏ Vui L√≤ng Th·ª±c Hi·ªán Theo H∆∞·ªõng D·∫´n Sau:</blockquote>

<b>/chuyentien [d·∫•u c√°ch] ID nh·∫≠n ti·ªÅn [d·∫•u c√°ch] S·ªë ti·ªÅn mu·ªën chuy·ªÉn</b>

<b>üîπÔ∏èVD: /chuyentien 123456789 200000</b>

<b>‚ö°Ô∏è Ph√≠ chuy·ªÉn ti·ªÅn l√† 5% ƒë∆∞·ª£c tr·ª´ v√†o t√†i kho·∫£n ng∆∞·ªùi chuy·ªÉn</b>
''', parse_mode='HTML')


@bot.callback_query_handler(func=lambda call: call.data == 'rut_tien_bank')
def show_rut_tien_bank(call):

    bot.send_message(
        call.message.chat.id, f'''
üå∏ K√äNH R√öT TI·ªÄN üí∏

üõë Vui L√≤ng Th·ª±c Hi·ªán Theo H∆∞·ªõng D·∫´n Sau : 

üëâ /rutbank [d·∫•u c√°ch] M√£ ng√¢n h√†ng [d·∫•u c√°ch]  S·ªë t√†i kho·∫£n [d·∫•u c√°ch] T√™n ch·ªß t√†i kho·∫£n [d·∫•u c√°ch] S·ªë ti·ªÅn mu·ªën r√∫t.

üëâ VD:  Mu·ªën r√∫t 100k ƒë·∫øn TK s·ªë 01234567890 t·∫°i Ng√¢n h√†ng Vietcombank. Th·ª±c hi·ªán theo c√∫ ph√°p sau:

/rutbank MBB 0987654321 NguyenVanA 10000

‚ö†Ô∏è L∆∞u √Ω: Kh√¥ng h·ªó tr·ª£ ho√†n ti·ªÅn n·∫øu b·∫°n nh·∫≠p sai th√¥ng tin T√†i kho·∫£n. 

üå∏ T√äN NG√ÇN H√ÄNG - M√É NG√ÇN H√ÄNG üí¶

üìå Vietcombank => VCB
üìå BIDV => BIDV
üìå Vietinbank => VTB
üìå Techcombank => TCB
üìå MB Bank => MBB
üìå Agribank => AGR
üìå TienPhong Bank => TPB
üìå SHB bank => SHB
üìå ACB => ACB
üìå Maritime Bank => MSB
üìå VIB => VIB
üìå Sacombank => STB
üìå VP Bank => VPB
üìå SeaBank => SAB
üìå Shinhan bank Vi·ªát Nam => SHBVN
üìå Eximbank => EIB
üìå KienLong Bank => KLB
üìå Dong A Bank => DAB
üìå HD Bank => HDB
üìå LienVietPostBank => LVPB
üìå VietBank => VBB
üìå ABBANK => ABB
üìå PG Bank => PGB
üìå PVComBank => PVC
üìå Bac A Bank => BAB
üìå Sai Gon Commercial Bank => SCB
üìå BanVietBank => VCCB
üìå Saigonbank => SGB
üìå Bao Viet Bank => BVB
üìå Orient Commercial Bank => OCB

‚ö†Min r√∫t 10.000 
''')


@bot.callback_query_handler(func=lambda call: call.data == 'rut_tien_momo')
def show_rut_tien_momo(call):

    bot.send_message(
        call.message.chat.id, f'''
üí∏ Vui l√≤ng th·ª±c hi·ªán theo h∆∞·ªõng d·∫´n sau:

/rutmomo [d·∫•u c√°ch] SƒêT [d·∫•u c√°ch] S·ªë ti·ªÅn mu·ªën r√∫t

‚û°Ô∏è VD  /rutmomo 0987112233 200000

‚ö†Ô∏è L∆∞u √Ω: ‚ùå Kh√¥ng h·ªó tr·ª£ ho√†n ti·ªÅn n·∫øu b·∫°n nh·∫≠p sai th√¥ng tin SƒêT. 

‚ùóÔ∏è Ph√≠ r√∫t ti·ªÅn: 1.900ƒë cho c√°c giao d·ªãch d∆∞·ªõi 10.000ƒë. ( R√öT T·ª™ 50.000ƒë TR·ªû L√äN KH√îNG M·∫§T PH√ç R√öT)
''')



@bot.callback_query_handler(func=lambda call: call.data == 'show_history')
def show_history(call):
    try:
        user_id = call.from_user.id

        with open("historyrut.txt", "r") as history_file:
            user_history = ""
            for line in history_file:
                if str(user_id) in line:
                    user_history += line

        if user_history:
            bot.send_message(
                call.message.chat.id,
                f"Lo·∫°i | UID | S·ªë Ti·ªÅn | Ng√¢n H√†ng | STK | T√™n Ch·ªß TK |\n{user_history}"
            )
        else:
            bot.send_message(call.message.chat.id, "L·ªãch s·ª≠ c·ªßa b·∫°n l√† tr·ªëng.")
    except Exception as e:
        print(str(e))
        bot.send_message(call.message.chat.id, "ƒê√£ x·∫£y ra l·ªói khi l·∫•y l·ªãch")


@bot.callback_query_handler(func=lambda call: call.data == 'show_history_1')
def show_history_1(call):
    try:
        with open("historynap.txt", "r") as history_file:
            history = history_file.read()

        if history.strip():
            bot.send_message(
                call.message.chat.id,
                f"Lo·∫°i | T√™n | S·ªë Ti·ªÅn | Ng√¢n H√†ng | STK | T√™n Ch·ªß TK |\n{history}"
            )
        else:
            bot.send_message(call.message.chat.id, "Kh√¥ng c√≥ l·ªãch s·ª≠ n·∫°p.")
    except Exception as e:
        print(str(e))
        bot.send_message(call.message.chat.id, "ƒê√£ x·∫£y ra l·ªói khi l·∫•y l·ªãch")


@bot.callback_query_handler(func=lambda call: call.data == "mua_gitcode")
def show_mua_gitcode(call):

    bot.send_message(
        call.message.chat.id, f'''
<b>üéâ ƒê·ªÉ mua Giftcode, chat v·ªõi l·ªánh sau:</b>

<b>/muacode [d·∫•u c√°ch] s·ªë l∆∞·ª£ng [d·∫•u c√°ch] gi√° tr·ªã m·ªói code</b>

<b>V√≠ d·ª•: /muacode 1 5000</b>

<b>Ph√≠ mua Giftcode l√† 5%</b>
    ''', parse_mode='HTML')



@bot.message_handler(commands=['chuyentien'])
def chuyentien(message):
    try:
        parts = message.text.split()
        if len(parts) != 3:
            bot.reply_to(
                message,
                "Vui l√≤ng nh·∫≠p ƒë√∫ng ƒë·ªãnh d·∫°ng: /chuyentien [ID ng∆∞·ªùi nh·∫≠n] [s·ªë ti·ªÅn]"
            )
            return

        recipient_id = int(parts[1])
        amount = float(parts[2])

        sender_id = message.from_user.id
        if sender_id not in user_balance:
            bot.reply_to(message,
                         "S·ªë d∆∞ c·ªßa b·∫°n kh√¥ng ƒë·ªß ƒë·ªÉ th·ª±c hi·ªán giao d·ªãch.")
            return

        sender_balance = user_balance[sender_id]
        if amount > sender_balance:
            bot.reply_to(message,
                         "S·ªë d∆∞ c·ªßa b·∫°n kh√¥ng ƒë·ªß ƒë·ªÉ th·ª±c hi·ªán giao d·ªãch.")
            return

        transfer_fee = amount * 0.05
        net_transfer_amount = amount - transfer_fee

        user_balance[sender_id] -= amount

        if recipient_id not in user_balance:
            user_balance[recipient_id] = 0
        user_balance[recipient_id] += net_transfer_amount

        save_balance_to_file()

        sender_formatted_balance = '{:,.0f} VNƒê'.format(
            user_balance[sender_id])
        recipient_formatted_balance = '{:,.0f} VNƒê'.format(
            user_balance[recipient_id])
        bot.send_message(
            sender_id,
            f"<b>‚ô®Ô∏è B·∫°n ƒê√£ Chuy·ªÉn: {net_transfer_amount:,.0f} Cho Ng∆∞·ªùi D√πng\nC√≥ ID: {recipient_id} Th√†nh C√¥ng.\nS·ªë d∆∞ m·ªõi c·ªßa b·∫°n: {sender_formatted_balance}\n\nüîπÔ∏è Ph√≠ Chuy·ªÉn 5% S·∫Ω Tr·ª´ V√†o V√≠ C·ªßa B·∫°n üîπÔ∏è</b>", parse_mode='HTML'
        )
        bot.send_message(
            recipient_id,
            f"<b>üçÄ B·∫°n ƒê√£ Nh·∫≠n ƒê∆∞·ª£c {net_transfer_amount:,.0f} T·ª´ Ng∆∞·ªùi Ch∆°i C√≥ ID {sender_id}.\nS·ªë D∆∞ M·ªõi C·ªßa B·∫°n: {recipient_formatted_balance}</b>", parse_mode='HTML'
        )

        group_message = f"Ng∆∞·ªùi d√πng c√≥ ID {sender_id} ƒë√£ chuy·ªÉn {net_transfer_amount:,.0f} VNƒê cho ng∆∞·ªùi d√πng c√≥ ID {recipient_id}."
        bot.send_message(chat_id=group_chat_id, text=group_message)

    except ValueError:
        bot.reply_to(message, "Vui l√≤ng nh·∫≠p s·ªë ti·ªÅn l√† m·ªôt s·ªë h·ª£p l·ªá.")


@bot.message_handler(commands=['naptien'])
def naptien(message):
    user_id = message.from_user.id
    balance = user_balance.get(user_id, 0)
    if message.from_user.id != 6262408926:
        bot.reply_to(message, "‚ö†Ô∏è B·∫°n kh√¥ng c√≥ quy·ªÅn th·ª±c hi·ªán thao t√°c n√†y.")
        return

    try:
        command_parts = message.text.split()
        if len(command_parts) != 3:
            raise ValueError("S·ª≠ d·ª•ng c√∫ ph√°p kh√¥ng h·ª£p l·ªá. Vui l√≤ng nh·∫≠p ƒë√∫ng c√∫ ph√°p: /naptien [UID] [s·ªë ti·ªÅn]")

        user_id = int(command_parts[1])
        amount = int(command_parts[2])

        load_balance_from_file()

        balance_from_file = user_balance.get(user_id, 0)
        rounded_balance = round(balance_from_file)

        if user_id in user_balance:
            user_balance[user_id] += amount
        else:
            user_balance[user_id] = amount

        save_balance_to_file()

        bot.reply_to(message, f"<b>‚úÖ N·∫°p ti·ªÅn th√†nh c√¥ng\nS·ªë ti·ªÅn {amount:,}\nVNƒê ID {user_id}.</b>", parse_mode='HTML')
        
        encoded_user_id = f"**{str(user_id)[-4:]}**"
        bot3.send_message(
            group_chat_id2,
            f"üí∏ <b>Ng∆∞·ªùi d√πng: {encoded_user_id}\n\n‚ôªÔ∏è N·∫°p ti·ªÅn th√†nh c√¥ng {amount:,} VNƒê</b>", parse_mode='HTML'
        )
        bot.send_message(user_id, f"<blockquote>ƒê∆°n N·∫°p C·ªßa B·∫°n ƒê√£ ƒê∆∞·ª£c X√©t Duy·ªát</blockquote>\n<b>üçÄ B·∫°n ƒê∆∞·ª£c C·ªông {amount:,} V√†o V√≠.\nS·ªë D∆∞ M·ªõi C·ªßa B·∫°n: {rounded_balance:,}</b>", parse_mode='HTML')
    except ValueError as e:
        bot.reply_to(message, str(e))

@bot.message_handler(commands=['trutien'])
def trutien(message):
   # Ki·ªÉm tra quy·ªÅn h·∫°n c·ªßa ng∆∞·ªùi g·ª≠i (admin)
   if message.from_user.id != 6262408926:
       bot.reply_to(message, "‚ö†Ô∏è B·∫°n kh√¥ng c√≥ quy·ªÅn th·ª±c hi·ªán thao t√°c n√†y.")
       return

   # Ph√¢n t√≠ch th√¥ng ƒëi·ªáp t·ª´ admin
   try:
       command_parts = message.text.split()
       if len(command_parts) != 3:
           raise ValueError("S·ª≠ d·ª•ng c√∫ ph√°p kh√¥ng h·ª£p l·ªá. Vui l√≤ng nh·∫≠p ƒë√∫ng c√∫ ph√°p: /trutien [d·∫•u c√°ch]uid [d·∫•u c√°ch]s·ªë ti·ªÅn mu·ªën tr·ª´")

       user_id = int(command_parts[1])
       amount = int(command_parts[2])

       # Ki·ªÉm tra s·ªë ti·ªÅn trong t√†i kho·∫£n
       if user_id in user_balance:
           if user_balance[user_id] >= amount:
               user_balance[user_id] -= amount
           else:
               bot.reply_to(message, "‚ö†Ô∏è S·ªë d∆∞ trong t√†i kho·∫£n kh√¥ng ƒë·ªß ƒë·ªÉ th·ª±c hi·ªán giao d·ªãch.")
               return
       else:
           bot.reply_to(message, "‚ö†Ô∏è Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i trong h·ªá th·ªëng.")
           return

       # L∆∞u s·ªë d∆∞ m·ªõi v√†o file
       save_balance_to_file()

       # G·ª≠i th√¥ng b√°o x√°c nh·∫≠n cho admin
       bot.reply_to(message, f"‚úÖ S·ªë ti·ªÅn {amount:,} VNƒê ƒë√£ ƒë∆∞·ª£c tr·ª´ t·ª´ t√†i kho·∫£n c·ªßa ng∆∞·ªùi d√πng c√≥ ID {user_id}.")

       # G·ª≠i th√¥ng b√°o cho ng∆∞·ªùi d√πng x√°c nh·∫≠n s·ªë ti·ªÅn ƒë√£ b·ªã tr·ª´
       bot.send_message(user_id, f"‚ö†Ô∏è S·ªë ti·ªÅn {amount:,} VNƒê ƒë√£ b·ªã tr·ª´ t·ª´ t√†i kho·∫£n c·ªßa b·∫°n.")
   except ValueError as e:
       bot.reply_to(message, str(e))


#B·∫£ng game-------------------------------------------------------------------------------------


def show_game_options(msg):
    photo_link = 'https://i.imgur.com/DMHBMRn.jpeg'

    bot.send_photo(msg.chat.id,
                   photo_link,
                   caption="""
<b>LUXURY ROOM T√ÄI X·ªàU VIP</b>\n
<b>üëáH√£y ch·ªçn c√°c game ph√≠a d∆∞·ªõi nh√©üëá</b>
        """,
                   reply_markup=create_game_options(),
                   parse_mode='HTML')


def create_game_options():
    markup = telebot.types.InlineKeyboardMarkup(row_width=1)

    markup.add(
        telebot.types.InlineKeyboardButton(
            "üé≤ T√†i X·ªâu Room", callback_data="game_txrom"))

    return markup


#h·ªó tr·ª£-------------------------------------------------------------
def show_admin_hotro(msg):
    photo_link = "https://i.imgur.com/DMHBMRn.jpeg"
    bot.send_photo(msg.chat.id,
                   photo_link,
                   caption=f"""
TH√îNG TIN H·ªñ TR·ª¢ GAME PH√çA D∆Ø·ªöI 
üö® H·ªñ TR·ª¢ 24/24 üö®
          """,
                   parse_mode='HTML',
                   reply_markup=user_hotro())


def user_hotro():
    markup = telebot.types.InlineKeyboardMarkup(row_width=3)

    markup.add(
        telebot.types.InlineKeyboardButton("Qu·∫£n L√Ω",
                                           url="https://t.me/heheviptool"),
        telebot.types.InlineKeyboardButton("Qu·∫£n Tr·ªã Vi√™n",
                                           url="https://t.me/mrdoom99"),
        telebot.types.InlineKeyboardButton("Home",
                                           url="https://t.me/heheviptool"))

    return markup


def show_friend_options(msg):
    user_id = msg.from_user.id
    total_referrals = len(user_referrals.get(user_id, []))
    daily_earning = daily_earnings.get(user_id, 0)
    referral_link = f"https://t.me/luxury_cltx_bot?start={user_id}"

    bot.send_message(msg.chat.id,
                     text=f"""
<b>üå∏ Tham Gia M·ªùi B·∫°n Ngay Nh·∫≠n Qu√† Trao Tay üí•</b>

<b>üëâ Link m·ªùi b·∫°n b√® c·ªßa b·∫°n: <blockquote><code>{referral_link}</code></blockquote></b>

<b>‚òùÔ∏è CLICK V√ÄO LINK TR√äN ƒê·ªÇ COPPY V√Ä G·ª¨I CHO B·∫†N B√à</b>

<b>üå∫ Nh·∫≠n ngay HOA H·ªíNG b·∫±ng 2% s·ªë ti·ªÅn thua c∆∞·ª£c t·ª´ ng∆∞·ªùi ch∆°i m√† b·∫°n gi·ªõi thi·ªáu.</b>

<b>üå∫ T·ªïng hoa h·ªìng üå∫ : {round(daily_earning):,}</b>

<b>ü§ù S·ªë L∆∞·ª£ng C·∫•p D∆∞·ªõi : {total_referrals}</b>

<b>Hoa h·ªìng nh·∫≠n ƒë∆∞·ª£c h√¥m nay:</b>
<b>Hoa h·ªìng nh·∫≠n ƒë∆∞·ª£c tu·∫ßn n√†y:</b>
""",
                     parse_mode='HTML')



@bot.callback_query_handler(func=lambda call: call.data.startswith("game_"))
def game_callback(call):
    if call.data == "game_txrom":
        show_txroom_options(call.from_user.id)
        pass

def txroom():

    markup = telebot.types.InlineKeyboardMarkup(row_width=1)

    markup.add(
        telebot.types.InlineKeyboardButton("Game T√†i X·ªâu Room",
                                           url="https://t.me/toolviphahaa")),

    return markup

def show_txroom_options(user_id):

    bot.send_message(user_id,
                     """
üé≤ T√ÄI - X·ªàU ROOM üé≤

üëâ Khi BOT tr·∫£ l·ªùi m·ªõi ƒë∆∞·ª£c t√≠nh l√† ƒë√£ ƒë·∫∑t c∆∞·ª£c th√†nh c√¥ng. 

üëâ N·∫øu BOT kh√¥ng tr·∫£ l·ªùi => L∆∞·ª£t ch∆°i kh√¥ng h·ª£p l·ªá v√† kh√¥ng b·ªã tr·ª´ ti·ªÅn trong t√†i kho·∫£n.

üëâ K·∫øt Qu·∫£ Xanh Ch√≠nh N√≥i Kh√¥ng V·ªõi Ch·ªânh C·∫ßu.

üîñ Th·ªÉ l·ªá nh∆∞ sau

[L·ªánh] ‚û§ [T·ª∑ l·ªá] ‚û§ [K·∫øt qu·∫£]

T   |  1.9  | 11 - 18
X   |  1.9  | 3 - 10 
TAI MAX   |  1.9  | 11 - 18
XIU MAX   |  1.9  | 3 - 10 

* L∆∞u √Ω: c√≥ th·ªÉ c∆∞·ª£c ch·ªØ nh·ªè ho·∫∑c to nh√© !

üéÆ C√ÅCH CH∆†I: Chat t·∫°i ƒë√¢y n·ªôi dung sau

üëâ ƒê·∫∑t: [L·ªánh] [d·∫•u c√°ch] [S·ªë ti·ªÅn c∆∞·ª£c]

[ V√≠ d·ª•: XIU 1000 ho·∫∑c TAI 1000 & XIU ALL ho·∫∑c TAI ALL ]

""",
                     parse_mode='HTML', reply_markup=txroom())


#===========-------------------===========( H√†m r√∫t ti·ªÅn )===========------------================---------------========

@bot.message_handler(commands=['rutbank'])
def handle_ruttien(message):
    try:
        command_parts = message.text.split()[1:]
        if len(command_parts) != 4:
            bot.reply_to(
                message,
                "Sai c√∫ ph√°p. Vui l√≤ng s·ª≠ d·ª•ng /rutbank [t√™n ng√¢n h√†ng] [s·ªë t√†i kho·∫£n] [ch·ªß t√†i kho·∫£n] [s·ªë ti·ªÅn]"
            )
            return

        bank_name = command_parts[0]
        account_number = command_parts[1]
        account_holder = command_parts[2]
        amount = float(command_parts[3])

        if amount < 10000:
            bot.reply_to(message,
                         "S·ªë ti·ªÅn r√∫t t·ª´ Bank ph·∫£i √≠t nh·∫•t l√† 10,000 VNƒê.")
            return

        user_id = message.from_user.id
        if user_id not in user_balance:
            bot.reply_to(message,
                         "B·∫°n ch∆∞a c√≥ s·ªë d∆∞ trong t√†i kho·∫£n c·ªßa m√¨nh.")
            return

        if user_balance[user_id] < amount:
            bot.reply_to(message, "S·ªë d∆∞ kh√¥ng ƒë·ªß ƒë·ªÉ r√∫t ti·ªÅn.")
            return

        user_balance[user_id] -= amount
        save_balance_to_file()

        amount_str = '{:,.0f}'.format(amount).replace(',', '.')
        encoded_amount_str = '{:,.0f}'.format(amount).replace('.', ',')

        with open("historyrut.txt", "a") as history_file:
            history_file.write(
                f"Bank {user_id} {amount_str} {bank_name} {account_number} {account_holder}\n"
            )

        bot.reply_to(
            message,
            f"<b>B·∫°n T·∫°o ƒê∆°n R√∫t Ti·ªÅn Th√†nh C√¥ng, Vui L√≤ng Ch·ªù X√©t Duy·ªát.\nS·ªë ti·ªÅn r√∫t: {amount_str}\nNg√¢n h√†ng: {bank_name}\nS·ªë t√†i kho·∫£n: {account_number}\nCh·ªß t√†i kho·∫£n: {account_holder}</b>", parse_mode='HTML'
        )
        time.sleep(1)
        bot.send_message(
            group_chat_id,
            f"<pre>Ng∆∞·ªùi d√πng {user_id}\nƒê√£ r√∫t ti·ªÅn t·ª´ Bank.\nS·ªë ti·ªÅn: {amount_str}\nNg√¢n h√†ng: {bank_name}\nS·ªë t√†i kho·∫£n: {account_number}\nCh·ªß t√†i kho·∫£n: {account_holder}</pre>"
        , parse_mode='HTML')
        time.sleep(1)
        encoded_user_id = f"**{str(user_id)[-4:]}**"
        bot3.send_message(
            group_chat_id2,
            f"üí∏ <b>Ng∆∞·ªùi d√πng {encoded_user_id}\n\n- R√∫t ti·ªÅn th√†nh c√¥ng {encoded_amount_str} v·ªÅ Bank: {bank_name}</b>", parse_mode='HTML'
        )

    except Exception as e:
        pass
        bot.reply_to(message,
                     "ƒê√£ x·∫£y ra l·ªói trong qu√° tr√¨nh x·ª≠ l√Ω y√™u c·∫ßu c·ªßa b·∫°n.")
        pass #print(f"Error: {e}")

@bot.message_handler(commands=['rutmomo'])
def handle_rutmomo(message):
    try:
        command_parts = message.text.split()[1:]
        if len(command_parts) != 2:
            bot.reply_to(
                message,
                "Sai c√∫ ph√°p. Vui l√≤ng s·ª≠ d·ª•ng /rutmomo [SƒêT] [s·ªë ti·ªÅn]")
            return

        phone_number = command_parts[0]
        if not phone_number.isdigit() or len(phone_number) != 10:
            bot.reply_to(message, "S·ªë ƒëi·ªán tho·∫°i kh√¥ng h·ª£p l·ªá. Vui l√≤ng nh·∫≠p l·∫°i.")
            return

        try:
            amount = float(command_parts[1])
        except ValueError:
            bot.reply_to(message, "S·ªë ti·ªÅn kh√¥ng h·ª£p l·ªá. Vui l√≤ng nh·∫≠p l·∫°i.")
            return

        if amount < 10000: 
            bot.reply_to(message, "S·ªë ti·ªÅn r√∫t t·ª´ Momo ph·∫£i √≠t nh·∫•t l√† 10,000 VNƒê.")
            return

        user_id = message.from_user.id
        if user_id not in user_balance:
            bot.reply_to(message, "B·∫°n ch∆∞a c√≥ s·ªë d∆∞ trong t√†i kho·∫£n c·ªßa m√¨nh.")
            return

        if user_balance[user_id] < amount:
            bot.reply_to(message, "S·ªë d∆∞ kh√¥ng ƒë·ªß ƒë·ªÉ r√∫t ti·ªÅn.")
            return

        user_balance[user_id] -= amount
        save_balance_to_file()
        amount_formatted = '{:,.0f}'.format(amount).replace(',', '.')

        with open("historyrut.txt", "a") as history_file:
            history_file.write(f"Momo {user_id} {amount_formatted} {phone_number}\n")

        bot.reply_to(
            message,
            f"<b>B·∫°n T·∫°o ƒê∆°n R√∫t Ti·ªÅn Th√†nh C√¥ng, Vui L√≤ng Ch·ªù X√©t Duy·ªát.\nS·ªë ti·ªÅn: {amount_formatted}\nS·ªë ƒëi·ªán tho·∫°i: {phone_number}</b>",
            parse_mode='HTML'
        )

        time.sleep(1)
        bot.send_message(
            group_chat_id,
            f"<pre>Ng∆∞·ªùi d√πng {user_id}\nƒê√£ r√∫t ti·ªÅn qua Momo.\nS·ªë ti·ªÅn: {amount_formatted}\nS·ªë ƒëi·ªán tho·∫°i: {phone_number}</pre>",
            parse_mode='HTML'
        )

        time.sleep(1)
        encoded_user_id = f"**{str(user_id)[-4:]}**"
        bot3.send_message(
            group_chat_id2,
            f"üí∏ <b>Ng∆∞·ªùi d√πng {encoded_user_id}\n\nR√∫t ti·ªÅn th√†nh c√¥ng {amount_formatted} v·ªÅ MoMo</b>",
            parse_mode='HTML'
        )

    except Exception as e:
        bot.reply_to(message, "ƒê√£ x·∫£y ra l·ªói trong qu√° tr√¨nh x·ª≠ l√Ω y√™u c·∫ßu c·ªßa b·∫°n.")
        pass #print(f"Error handling /rutmomo command: {e}")



#----------------------------------------------------------------------------------------
#CODE C·ª¶A @thanhtran309 Telegram TXROOM vui l√≤ng kh√¥ng x√≥a s·∫Ω kh√¥ng d√πng ƒë∆∞·ª£c nhaaaaaaaa#
#----------------------------------------------------------------------------------------


bot2 = telebot.TeleBot('6750084311:AAEZapSvXNIZDFUtutSPnvBiusbJITbT9To')


def send_dice_room_reply(group_chat_id2):
    response = requests.get(
        f'https://api.telegram.org/bot6750084311:AAEZapSvXNIZDFUtutSPnvBiusbJITbT9To/sendDice?chat_id=-1002015841488'
    )
    if response.status_code == 200:
        data = response.json()
        if 'result' in data and 'dice' in data['result']:
            return data['result']['dice']['value']
    return None

def load_balances_from_file():
    balances = {}
    if os.path.exists("sodu.txt"):
        with open("sodu.txt", "r") as f:
            for line in f:
                if line.strip():
                    user_id, balance_str = line.strip().split()
                    balance = float(balance_str)
                    if balance.is_integer():
                        balance = int(balance)
                    balances[int(user_id)] = balance
    return balances


def save_session_to_file():
    with open("phien.txt", "w") as file:
        file.write(str(current_session))


def load_session_from_file():
    global current_session
    try:
        with open("phien.txt", "r") as file:
            current_session = int(file.read())
    except FileNotFoundError:
        current_session = 1


def save_session_history_to_file():
    last_10_sessions = session_results[-10:]
    display_last_10 = " ".join(
        ["üîµ" if session == 'T' else "üî¥" for session in last_10_sessions])
    with open("matphien.txt", "w", encoding='utf-8') as file:
        file.write(display_last_10)

def load_session_history_from_file():
    global session_results
    try:
        with open("matphien.txt", "r", encoding='utf-8') as file:
            session_history = file.read().split()
            session_results = [
                'T' if session == 'üîµ' else 'X'
                for session in session_history
            ]
    except FileNotFoundError:
        session_results = []

@bot2.message_handler(commands=['off'])
def turn_off(message):
    if message.chat.type != 'private':
        chat_id = message.chat.id
        permissions = ChatPermissions(can_send_messages=False)
        bot2.set_chat_permissions(chat_id, permissions)
        bot2.reply_to(message, 'off.')
    else:
        bot2.reply_to(message, 'off nh√≥m.')


@bot2.message_handler(commands=['on'])
def turn_on(message):
    if message.chat.type != 'private':
        chat_id = message.chat.id
        permissions = ChatPermissions(can_send_messages=True)
        bot2.set_chat_permissions(chat_id, permissions)
        bot2.reply_to(message, 'on.')
    else:
        bot2.reply_to(message, 'on nh√≥m.')

@bot2.message_handler(commands=['sd'])
def show_balance(message):
    if message.chat.id == group_chat_id2:
        user_id = message.from_user.id
        if user_id in user_balance:
            balance = user_balance[user_id]
            bot2.reply_to(message, f"<b>S·ªë d∆∞ hi·ªán t·∫°i</b>: {int(balance):,}", reply_to_message_id=message.message_id, parse_mode='HTML')
    else:
        bot2.reply_to(message, "Ch·ªâ cho ph√©p s·ª≠ d·ª•ng t·∫°i room.")

def reset_toptuanbxh():
    with open("toptuanbxh.json", "w") as f:
        json.dump({}, f)


def reset_topngaybxh():
    with open("topngaybxh.json", "w") as f:
        json.dump({}, f)

scheduler = BackgroundScheduler()

scheduler.add_job(reset_topngaybxh, 'cron', day_of_week='*', hour=0, minute=0, second=0, timezone='Asia/Ho_Chi_Minh')
scheduler.add_job(reset_toptuanbxh, 'cron', day_of_week='mon', hour=0, minute=0, second=0, timezone='Asia/Ho_Chi_Minh')

scheduler.start()

#=============-----------==============-----------==============---------------==============
#CODE C·ª¶A @thanhtran309 Telegram TXROOM vui l√≤ng kh√¥ng x√≥a s·∫Ω kh√¥ng d√πng ƒë∆∞·ª£c nhaaaaaaaa#
#=============-----------==============-----------==============---------------==============

group_chat_id2 = -1002015841488 #th√¥ng b√°o nh√≥m room
group_chat_id3 = -1002116362947 #th√¥ng b√°o nh√≥m admin
group_chat_id4 = -1002126182643 #th√¥ng b√°o nh√≥m kqroom

current_session = 1
session_results = []
processed_users = set()
display_last_10 = ""
accepting_bets = False


def check_result(dice_sum):
    if 11 <= dice_sum <= 18:
        return 'T'
    elif 3 <= dice_sum <= 10:
        return 'X'
    else:
        return 'None'

def check_result1(dice_sum):
    if 11 <= dice_sum <= 18:
        return 'T√ÄI'
    elif 3 <= dice_sum <= 10:
        return 'X·ªàU'
    else:
        return 'None'

def notify_bet_success(user_id, bet_type, bet_amount):
    bet_message = f"<pre>Game TX Room\nUser: [{user_id}] ƒë√£ c∆∞·ª£c [{bet_type}] s·ªë ti·ªÅn [{bet_amount:,} ƒë] th√†nh c√¥ng!</pre>"
    bot.send_message(group_chat_id3, bet_message, parse_mode='HTML')

def confirm_bet(user_id, bet_type, bet_amount, original_message_id, is_anonymous=False):
    global current_session
    global user_balance

    if user_balance.get(user_id, 0) >= bet_amount:
        if user_id not in user_bets:
            user_bets[user_id] = {'T': 0, 'X': 0}

        user_bets[user_id][bet_type.upper()] += bet_amount
        user_balance[user_id] -= bet_amount
        save_balance_to_file()

        with open("topngaybxh.json", "r+") as f:
            user_bets_dict = defaultdict(int)
            for line in f:
                data = json.loads(line)
                for uid, amount in data.items():
                    user_bets_dict[int(uid)] += amount
            user_bets_dict[user_id] += bet_amount
            f.seek(0)
            f.truncate(0)
            for uid, total_amount in user_bets_dict.items():
                json.dump({uid: total_amount}, f)
                f.write("\n")

        with open("toptuanbxh.json", "r+") as f:
            user_bets_dict = defaultdict(int)
            for line in f:
                data = json.loads(line)
                for uid, amount in data.items():
                    user_bets_dict[int(uid)] += amount
            user_bets_dict[user_id] += bet_amount
            f.seek(0)
            f.truncate(0)
            for uid, total_amount in user_bets_dict.items():
                json.dump({uid: total_amount}, f)
                f.write("\n")

        encoded_user_id = f"***{str(user_id)[-4:]}"
        remaining_balance = user_balance[user_id]
        if is_anonymous:
            confirmation_message = f"üèÆ <b>ƒê·∫∑t th√†nh c√¥ng k·ª≥ XX #<code>{current_session}</code>\nL·ªánh {bet_type}\nS·ªë ti·ªÅn c∆∞·ª£c: <code>{int(bet_amount):,}</code>\nNg∆∞·ªùi c∆∞·ª£c: <code>(·∫®n Danh)</code></b>"
            bot2.send_message(group_chat_id2, confirmation_message, parse_mode='HTML')
        else:
            confirmation_message = f"üèÆ <b>ƒê·∫∑t th√†nh c√¥ng k·ª≥ #<code>{current_session}</code>\nL·ªánh {bet_type}\nS·ªë ti·ªÅn c∆∞·ª£c: <code>{int(bet_amount):,}</code>\nNg∆∞·ªùi c∆∞·ª£c: <code>({encoded_user_id})</code></b>"
            bot2.send_message(group_chat_id2, confirmation_message, reply_to_message_id=original_message_id, parse_mode='HTML')

        confirmation_message1 = f"üèÆ <b>B·∫°n ƒë·∫∑t th√†nh c√¥ng k·ª≥ XX #<code>{current_session}</code>\nL·ªánh: {bet_type} - {int(bet_amount):,}\nS·ªë d∆∞ c√≤n l·∫°i: {int(remaining_balance):,}</b>"
        bot.send_message(chat_id=user_id, text=confirmation_message1, parse_mode='HTML')
        notify_bet_success(user_id, bet_type, bet_amount)

        return True
    if is_anonymous:
            encoded_user_id = f"(·∫®n Danh)"
            bot2.send_message(group_chat_id2, f"‚ùå {encoded_user_id} Kh√¥ng ƒë·ªß s·ªë d∆∞ ƒë·ªÉ ƒë·∫∑t c∆∞·ª£c.")
    else:
        encoded_user_id = f"***{str(user_id)[-4:]}"
        bot2.send_message(group_chat_id2, f"‚ùå {encoded_user_id} Kh√¥ng ƒë·ªß s·ªë d∆∞ ƒë·ªÉ ƒë·∫∑t c∆∞·ª£c.", reply_to_message_id=original_message_id)
        return False



def calculate_user_winnings(user_id, game_result):
    if (game_result == 'T' and user_bets[user_id]['T']
            > 0) or (game_result == 'X' and user_bets[user_id]['X'] > 0):
        winnings = 1.95 * (user_bets[user_id]['T'] +
                          user_bets[user_id]['X'])
        user_balance[user_id] += winnings
        save_balance_to_file()
        return winnings
    return 0


def calculate_user_losses(user_id, game_result):
    if (game_result != 'T' and user_bets[user_id]['T']
            > 0) or (game_result != 'X' and user_bets[user_id]['X'] > 0):
        return user_bets[user_id]['T'] + user_bets[user_id]['X']
    return 0

keyboard1 = types.InlineKeyboardMarkup()
url_button = types.InlineKeyboardButton(text="Ch∆°i ·∫®n Danh",
                                        url="https://t.me/txroomluxury_bot")
keyboard1.add(url_button)

def start_game():
    global current_session, accepting_bets
    current_session += 1
    accepting_bets = True


    turn_on_group_chat()
    bot2.send_message(
        group_chat_id2,
        f"<blockquote> M·ªùi B·∫°n ƒê·∫∑t C∆∞·ª£c Phi√™n #<code>{current_session}</code></blockquote>\n\n"
        f"‚óâ<b> C√°ch Ch∆°i</b>: <code>T</code> [ s·ªë ti·ªÅn ] <code>X</code> [ s·ªë ti·ªÅn ]\n"
        f"‚óâ<b> C√°ch Ch∆°i</b>: <code>T MAX</code> <code>X MAX</code>\n\n"
        f"‚óâ V√≠ D·ª•: <b>T</b> 10000 & <b>X</b> 10000\n\n"
        f"‚óâ<b> Tr·∫£ th∆∞·ªüng cho ng∆∞·ªùi th·∫Øng *1.95</b>\n"
        f"‚óâ<b> Ch·ªâ ƒë∆∞·ª£c c∆∞·ª£c 1 m·∫∑t trong phi√™n</b>\n"
        f"‚óâ<b> Min c∆∞·ª£c: 3.000 - Max c∆∞·ª£c: 300.000</b>\n\n"
        f"‚óâ<b> B·∫Øt ƒë·∫ßu c∆∞·ª£c th·ªùi gian [ 90s ]</b>\n"
        f"üòò <b>M·ªùi c√°c ƒë·∫°i gia ra tay c∆∞·ª£c m·∫°nh nh√© !</b>\n",
        parse_mode='HTML', reply_markup=keyboard1)

    time.sleep(30)

    total_bet_T = sum([user_bets[user_id]['T'] for user_id in user_bets])
    total_bet_X = sum([user_bets[user_id]['X'] for user_id in user_bets])
    total_bet_TAI = sum(
        [1 for user_id in user_bets if user_bets[user_id]['T'] > 0])
    total_bet_XIU = sum(
        [1 for user_id in user_bets if user_bets[user_id]['X'] > 0])

    last_10_sessions = session_results[-10:]
    display_last_10 = " ".join(
        ["üîµ" if session == 'T' else "üî¥" for session in last_10_sessions])

    bot2.send_message(
        group_chat_id2,
        (
            f"<b>‚è∞ C√≤n 60s ƒë·ªÉ c∆∞·ª£c phi√™n #<code>{current_session}</code></b>\n"
            f"<blockquote>T·ªïng C∆∞·ª£c üîµ | T·ªïng C∆∞·ª£c üî¥</blockquote>\n"
            f"<b>üîµ T√ÄI: <code>{int(total_bet_T):,}</code></b>\n"
            f"\n"
            f"<b>üî¥ X·ªàU: <code>{int(total_bet_X):,}</code></b>\n\n"
            f"<blockquote>S·ªë Ng∆∞·ªùi C∆∞·ª£c T√ÄI -- X·ªàU</blockquote>\n"
            f"<b>üëÅ‚Äçüó® T√ÄI: <code>{int(total_bet_TAI):,}</code> Ng∆∞·ªùi c∆∞·ª£c.</b>\n"
            f"\n"
            f"<b>üëÅ‚Äçüó® X·ªàU: <code>{int(total_bet_XIU):,}</code> Ng∆∞·ªùi c∆∞·ª£c.</b>\n\n"
        ),
        parse_mode='HTML',
        reply_markup=keyboard1
    )

    time.sleep(30)

    total_bet_T = sum([user_bets[user_id]['T'] for user_id in user_bets])
    total_bet_X = sum([user_bets[user_id]['X'] for user_id in user_bets])
    total_bet_TAI = sum(
        [1 for user_id in user_bets if user_bets[user_id]['T'] > 0])
    total_bet_XIU = sum(
        [1 for user_id in user_bets if user_bets[user_id]['X'] > 0])

    bot2.send_message(
        group_chat_id2,
        (
            f"<b>‚è∞ C√≤n 30s ƒë·ªÉ c∆∞·ª£c phi√™n #[<code>{current_session}</code>]</b>\n"
            f"<blockquote>T·ªïng C∆∞·ª£c üîµ | T·ªïng C∆∞·ª£c üî¥</blockquote>\n"
            f"<b>üîµ T√ÄI: <code>{int(total_bet_T):,}</code></b>\n"
            f"\n"
            f"<b>üî¥ X·ªàU: <code>{int(total_bet_X):,}</code></b>\n\n"
            f"<blockquote>S·ªë Ng∆∞·ªùi C∆∞·ª£c T√ÄI -- X·ªàU</blockquote>\n"
            f"<b>üëÅ‚Äçüó® T√ÄI: <code>{int(total_bet_TAI):,}</code> Ng∆∞·ªùi c∆∞·ª£c.</b>\n"
            f"\n"
            f"<b>üëÅ‚Äçüó® X·ªàU: <code>{int(total_bet_XIU):,}</code> Ng∆∞·ªùi c∆∞·ª£c.</b>\n\n"
        ),
        parse_mode='HTML',
        reply_markup=keyboard1
    )

    time.sleep(20)

    total_bet_T = sum([user_bets[user_id]['T'] for user_id in user_bets])
    total_bet_X = sum([user_bets[user_id]['X'] for user_id in user_bets])
    total_bet_TAI = sum(
        [1 for user_id in user_bets if user_bets[user_id]['T'] > 0])
    total_bet_XIU = sum(
        [1 for user_id in user_bets if user_bets[user_id]['X'] > 0])

    bot2.send_message(
        group_chat_id2,
        (
            f"<b>‚è∞ C√≤n 10s ƒë·ªÉ c∆∞·ª£c phi√™n #[<code>{current_session}</code>]</b>\n"
            f"<blockquote>T·ªïng C∆∞·ª£c üîµ | T·ªïng C∆∞·ª£c üî¥</blockquote>\n"
            f"<b>üîµ T√ÄI: <code>{int(total_bet_T):,}</code></b>\n"
            f"\n"
            f"<b>üî¥ X·ªàU: <code>{int(total_bet_X):,}</code></b>\n\n"
            f"<blockquote>S·ªë Ng∆∞·ªùi C∆∞·ª£c T√ÄI -- X·ªàU</blockquote>\n"
            f"<b>üëÅ‚Äçüó® T√ÄI: <code>{int(total_bet_TAI):,}</code> Ng∆∞·ªùi c∆∞·ª£c.</b>\n"
            f"\n"
            f"<b>üëÅ‚Äçüó® X·ªàU: <code>{int(total_bet_XIU):,}</code> Ng∆∞·ªùi c∆∞·ª£c.</b>\n\n"
        ),
        parse_mode='HTML',
        reply_markup=keyboard1
    )

    time.sleep(10)

    total_bet_T = sum([user_bets[user_id]['T'] for user_id in user_bets])
    total_bet_X = sum([user_bets[user_id]['X'] for user_id in user_bets])
    total_bet_TAI = sum(
        [1 for user_id in user_bets if user_bets[user_id]['T'] > 0])
    total_bet_XIU = sum(
        [1 for user_id in user_bets if user_bets[user_id]['X'] > 0])

    bot2.send_message(
        group_chat_id2,
        (
            f"<b>‚è∞ H·∫øt th·ªùi gian phi√™n #[<code>{current_session}</code>]</b>\n"
            f"<blockquote>T·ªïng C∆∞·ª£c üîµ | T·ªïng C∆∞·ª£c üî¥</blockquote>\n"
            f"<b>üîµ T√ÄI: <code>{int(total_bet_T):,}</code></b>\n"
            f"\n"
            f"<b>üî¥ X·ªàU: <code>{int(total_bet_X):,}</code></b>\n\n"
            f"<blockquote>S·ªë Ng∆∞·ªùi C∆∞·ª£c T√ÄI -- X·ªàU</blockquote>\n"
            f"<b>üëÅ‚Äçüó® T√ÄI: <code>{int(total_bet_TAI):,}</code> Ng∆∞·ªùi c∆∞·ª£c.</b>\n"
            f"\n"
            f"<b>üëÅ‚Äçüó® X·ªàU: <code>{int(total_bet_XIU):,}</code> Ng∆∞·ªùi c∆∞·ª£c.</b>\n\n"
        ),
        parse_mode='HTML',
        reply_markup=keyboard1
    )

    turn_off_group_chat()
    accepting_bets = False
    time.sleep(6)

    bot2.send_message(
        group_chat_id2,
        f"<b>B·∫Øt ƒë·∫ßu tung x√∫c x·∫Øc phi√™n #<code>{current_session}</code></b>", parse_mode='HTML')
    time.sleep(3)

    result = [send_dice_room_reply(group_chat_id2) for _ in range(3)]
    dice_sum = sum(result)
    game_result = check_result(dice_sum)
    session_results.append(game_result)
    
    send_game_result_and_process_winnings(result, dice_sum, game_result)

    save_session_to_file()


def send_game_result_and_process_winnings(result, dice_sum, game_result):
    global current_session
    last_10_sessions = session_results[-10:]
    display_last_10 = " ".join(
        ["üîµ" if session == 'T' else "üî¥" for session in last_10_sessions])
    last_1_sessions = session_results[-1:]
    display_last_1 = " ".join(
        ["üîµ" if session == 'T' else "üî¥" for session in last_1_sessions])

    total_winnings = 0
    total_losses = 0
    user_winnings_dict = {}

    for user_id in user_bets:
        if user_id not in processed_users:
            try:
                user_winnings = calculate_user_winnings(user_id, game_result)
                user_losses = calculate_user_losses(user_id, game_result)
                total_winnings += user_winnings
                total_losses += user_losses
                processed_users.add(user_id)
                user_winnings_dict[user_id] = user_winnings

            except Exception as e:
                pass #print(f"{user_id}: {str(e)}")

    sorted_user_winnings = sorted(user_winnings_dict.items(), key=lambda x: x[1], reverse=True)

    leaderboard_message = "\n‚îÉ".join([
        f"{i+1} - <code>{'*' * 3 + str(uid)[-4:]}</code> - <code>{int(winnings):,}</code>"
        for i, (uid, winnings) in enumerate(sorted_user_winnings[:10])
    ])

    time.sleep(4)
    keyboard = types.InlineKeyboardMarkup()
    url_button = types.InlineKeyboardButton(text="K·∫øt Qu·∫£ TX [ Room ]",
                                            url="https://t.me/kqtxroomluxury")
    keyboard.add(url_button)
    bot2.send_message(
        group_chat_id2,
        (
            f"<b>üå∏ K·∫øt Qu·∫£ X√∫c X·∫Øc Phi√™n #<code>{current_session}</code>\n"
            f"‚îè‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îì\n"
            f"‚îÉ  {' '.join(map(str, result))}  ({dice_sum})  {check_result1(dice_sum)} {display_last_1}\n"
            f"‚îÉ\n"
            f"‚îÉ üîé T·ªïng Th·∫Øng: <code>{int(total_winnings):,}</code>\n"
            f"‚îÉ\n"
            f"‚îÉ üîé T·ªïng Thua: <code>{int(total_losses):,}</code>\n"
            f"‚îÉ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
            f"‚îÉ üèÜ Top B·∫£ng X·∫øp H·∫°ng #[<code>{current_session}</code>]\n"
            f"‚îÉ TOP - ID - T·ªïng th·∫Øng\n"
            f"‚îÉ{leaderboard_message}\n"
            f"‚îó‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îõ\n"
            f"L·ªãch S·ª≠ Phi√™n G·∫ßn Nh·∫•t\n\n"
            f"{display_last_10}\n\n"
            f"      üîµ  T√†i       |      üî¥   X·ªàU\n</b>"
        ),
        parse_mode='HTML',
        reply_markup=keyboard
    )
    result_message = f"<b>K·∫øt Qu·∫£ XX K·ª≥ #{current_session} - {display_last_1}\n{result} - ({dice_sum}) - {check_result1(dice_sum)}</b>"
    for user_id, user_winnings in user_winnings_dict.items():
        user_losses = calculate_user_losses(user_id, check_result1(dice_sum))
        balance = user_balance.get(user_id, 0)
        rounded_balance = round(balance)

        if user_winnings > 0:
            message_text = (
                f"üîπÔ∏è Phi√™n XX#<code>{current_session}</code> B·∫°n ƒê√£ Th·∫Øng\n"
                f"S·ªë ti·ªÅn th·∫Øng: <b>{int(user_winnings):,}</b>\n"
                f"S·ªë d∆∞ m·ªõi: <b>{int(rounded_balance):,}</b>"
            )
        else:
            message_text = (
                f"üîπÔ∏è Phi√™n XX#<code>{current_session}</code> B·∫°n ƒê√£ Thua\n"
                f"S·ªë ti·ªÅn thua: <b>{int(user_losses):,}</b>\n"
                f"S·ªë d∆∞ m·ªõi: <b>{int(rounded_balance):,}</b>"
            )

        bot.send_message(chat_id=user_id, text=message_text, parse_mode='HTML')
    bot2.send_message(group_chat_id4, result_message, parse_mode='HTML')
    user_bets.clear()
    processed_users.clear()
    save_balance_to_file()
    save_session_history_to_file()
    time.sleep(3)



def game_timer():
    while True:

        schedule.run_pending()

        start_game()
        

#=================----------====================-------------------=====================


@bot2.message_handler(func=lambda message: True)
def handle_message(message):
    global accepting_bets
    
    if accepting_bets:
        chat_id = message.chat.id

        if message.text.lower() == '/start':
            send_betting_menu(message)
        elif message.text and len(message.text.split()) == 2:
            bet_type, bet_amount_str = message.text.split()

            if bet_type.upper() in ['T', 'X'] or (bet_type.upper() == 'T' and bet_amount_str.upper() in ['MAX', '1000', '50000']):
                user_id = message.from_user.id

                try:
                    if bet_amount_str.upper() == 'MAX':
                        max_bet_amount = min(user_balance.get(user_id, 0), 300000)
                        if max_bet_amount >= 3000:
                            bet_amount = max_bet_amount
                        else:
                            bot2.send_message(group_chat_id2, "‚ùå S·ªë d∆∞ c·ªßa b·∫°n kh√¥ng ƒë·ªß ƒë·ªÉ c∆∞·ª£c.")
                            return True
                    else:
                        bet_amount = int(bet_amount_str)

                    if 3000 <= bet_amount <= 300000:
                        opposite_bet_type = 'T' if bet_type.upper() == 'X' else 'X'
                        if user_bets.get(user_id) and user_bets[user_id][opposite_bet_type] > 0:
                            bot2.send_message(group_chat_id2, "‚ùå Kh√¥ng ƒë∆∞·ª£c c∆∞·ª£c c·∫£ hai b√™n trong m·ªôt phi√™n.")
                        else:
                            if chat_id == group_chat_id2:
                                confirm_bet(user_id, bet_type, bet_amount, message.message_id, is_anonymous=False)
                            else:
                                confirm_bet(user_id, bet_type, bet_amount, message.message_id, is_anonymous=True)
                    else:
                        bot2.send_message(group_chat_id2, "‚ùå S·ªë ti·ªÅn c∆∞·ª£c ph·∫£i t·ª´ 3.000 ƒë·∫øn 300.000")
                except ValueError:
                    return True
                except telebot.apihelper.ApiException as e:
                    pass
                    return True
                except Exception as e:
                    pass #bot2.send_message(user_id, f"‚ùå ƒê√£ x·∫£y ra l·ªói: {str(e)}")
        else:
            return True
    else:
        try:
            bot2.delete_message(message.chat.id, message.message_id)
            if message.reply_to_message is not None:
                bot2.delete_message(message.chat.id, message.reply_to_message.message_id)
        except Exception as e:
            pass #print(f"Error deleting message: {e}")

        time.sleep(1)

        bot2.send_message(message.chat.id, "‚ùå ƒê√£ Ng∆∞ng Nh·∫≠n C∆∞·ª£c. Vui L√≤ng Ch·ªù Phi√™n C∆∞·ª£c Sau.")




def send_betting_menu(message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    tai_buttons = [
        types.KeyboardButton("t 5000"),
        types.KeyboardButton("t 20000"),
        types.KeyboardButton("t 50000"),
        types.KeyboardButton("t max")
    ]
    xiu_buttons = [
        types.KeyboardButton("x 5000"),
        types.KeyboardButton("x 20000"),
        types.KeyboardButton("x 50000"),
        types.KeyboardButton("x max")
    ]
    keyboard.row(*tai_buttons)
    keyboard.row(*xiu_buttons)
    bot2.send_message(message.chat.id, "Vui l√≤ng ch·ªçn c∆∞·ª£c.", reply_markup=keyboard)

#=========-------Th√¥ng b√°o room--------===============

load_balance_from_file()
load_session_from_file()
load_session_history_from_file()

def turn_on_group_chat():
    permissions = ChatPermissions(can_send_messages=True)
    bot2.set_chat_permissions(group_chat_id2, permissions)


def turn_off_group_chat():
    permissions = ChatPermissions(can_send_messages=False)
    bot2.set_chat_permissions(group_chat_id2, permissions)


timer_thread = threading.Thread(target=game_timer)
timer_thread.start()

bot3 = telebot.TeleBot('8027877843:AAG1z9OcCkdz8jcT3KnWuKi6BCzvlJhxu2s')

def check_file():
    try:
        with open("thanhtran309.txt", "r") as file:
            content = file.read()
            if "TRANTIENTHANH" not in content:
                print("L·ªói: 'thanhtran309.txt' n·∫øu b·∫°n x√≥a ch·ª© TRANTIENTHANH s·∫Ω kh√¥ng d√πng ƒë∆∞∆°c bot.")
                return False
    except FileNotFoundError:
        print("L·ªói: 'thanhtran309.txt' n·∫øu b·∫°n x√≥a ch·ª© TRANTIENTHANH s·∫Ω kh√¥ng d√πng ƒë∆∞∆°c bot.")
        return False
    return True   


def poll_bot(bot):
    try:
        bot.polling()
    except Exception as e:
        pass #print(f"An error occurred while polling bot: {e}")
        time.sleep(5)


if check_file():
    thread_bot = threading.Thread(target=poll_bot, args=(bot,))
    thread_bot2 = threading.Thread(target=poll_bot, args=(bot2,))
    thread_bot3 = threading.Thread(target=poll_bot, args=(bot3,))
    thread_bot.start()
    thread_bot2.start()
    thread_bot3.start()
