import logging
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes, filters
import random
import hashlib
import asyncio

# --- C·∫•u h√¨nh Logging ---
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO
)
logger = logging.getLogger(__name__)

# --- C·∫•u h√¨nh Bot ---
TELEGRAM_BOT_TOKEN = "7757369765:AAGNKUk80xeBAPXXZRTXySjQ0DPZXjzsueU"  # TOKEN BOT C·ª¶A B·∫†N
ADMIN_IDS = [6915752059]  # ID TELEGRAM C·ª¶A ADMIN

# --- Bi·∫øn to√†n c·ª•c (D·ªÆ LI·ªÜU N√ÄY S·∫º M·∫§T KHI BOT KH·ªûI ƒê·ªòNG L·∫†I!) ---
users_data = {}  # {user_id: {'balance': 100000, 'username': 'Nguyen Van A'}}
current_bets = {}  # {user_id: {'type': 'tai/xiu', 'amount': 10000, 'username': '...'}
current_session_id = 1748324  # B·∫Øt ƒë·∫ßu t·ª´ 1748324
session_is_active = False  # Tr·∫°ng th√°i phi√™n, ch·ªâ cho ph√©p c∆∞·ª£c khi True
last_dice_roll_info = {}  # L∆∞u th√¥ng tin k·∫øt qu·∫£ phi√™n cu·ªëi c√πng ƒë·ªÉ admin xem
active_group_chat_id = None  # L∆∞u chat_id c·ªßa nh√≥m ƒëang ch∆°i ƒë·ªÉ admin c√≥ th·ªÉ can thi·ªáp t·ª´ chat ri√™ng

# --- C·∫•u h√¨nh Jackpot ---
JACKPOT_AMOUNT = 200000000000000000000000000000000000040013701100431380020  # Gi√° tr·ªã Jackpot kh·ªüi t·∫°o
JACKPOT_MIN_RESET_VALUE = 1000000000000000000000000000000000000000000000000000  # Gi√° tr·ªã Jackpot sau khi n·ªï
JACKPOT_CONTRIBUTION_RATE = 0.005  # 0.5% c·ªßa t·ªïng ti·ªÅn c∆∞·ª£c s·∫Ω v√†o Jackpot

# --- H√†m ti·ªán √≠ch ---
def is_admin(user_id):
    """Ki·ªÉm tra xem ng∆∞·ªùi d√πng c√≥ ph·∫£i admin kh√¥ng."""
    return user_id in ADMIN_IDS

def generate_dice_roll():
    """T·∫°o 3 vi√™n x√∫c x·∫Øc ng·∫´u nhi√™n."""
    return [random.randint(1, 6) for _ in range(3)]

def calculate_result(dice_roll):
    """T√≠nh t·ªïng v√† x√°c ƒë·ªãnh T√†i/X·ªâu."""
    total = sum(dice_roll)
    if 3 <= total <= 10:
        return "X·ªàU", total
    elif 11 <= total <= 18:
        return "T√ÄI", total
    else:
        return "L·ªñI", total # Tr∆∞·ªùng h·ª£p kh√¥ng mong mu·ªën

def generate_md5(session_id, random_string, dice_values):
    """T·∫°o MD5 minh b·∫°ch t·ª´ chu·ªói x√°c minh."""
    combined_string = f"#{session_id} {random_string} {'-'.join(map(str, dice_values))}"
    return hashlib.md5(combined_string.encode('utf-8')).hexdigest()

def get_current_pattern():
    """T·∫°o c·∫ßu hi·ªán t·∫°i (v√≠ d·ª• tƒ©nh, c·∫ßn DB ƒë·ªÉ l√†m ƒë·ªông)."""
    return "‚ö´Ô∏è‚ö´Ô∏è‚ö™Ô∏è‚ö™Ô∏è‚ö™Ô∏è‚ö™Ô∏è‚ö´Ô∏è‚ö´Ô∏è‚ö´Ô∏è‚ö´Ô∏è" 

# --- L·ªánh Kh·ªüi ƒë·ªông Bot ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user
    if user.id not in users_data:
        users_data[user.id] = {'balance': 100000, 'username': user.first_name}  # S·ªë d∆∞ m·∫∑c ƒë·ªãnh 100000
    
    await update.message.reply_html(
        rf"Ch√†o m·ª´ng {user.mention_html()}! T√¥i l√† bot c∆∞·ª£c T√†i X·ªâu. "
        rf"H√£y th√™m t√¥i v√†o nh√≥m c·ªßa b·∫°n ƒë·ªÉ b·∫Øt ƒë·∫ßu ch∆°i. "
        rf"B·∫°n c√≥ th·ªÉ ki·ªÉm tra s·ªë d∆∞ v·ªõi l·ªánh /check.",
    )

# --- L·ªánh Ki·ªÉm tra S·ªë d∆∞ ---
async def check_balance(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.effective_user.id
    if user_id not in users_data:
        users_data[user_id] = {'balance': 100000, 'username': update.effective_user.first_name}  # S·ªë d∆∞ m·∫∑c ƒë·ªãnh 100000
    
    await update.message.reply_text(f"üí∞ S·ªë d∆∞ hi·ªán t·∫°i c·ªßa b·∫°n: {users_data[user_id]['balance']:,} VNƒê")

# --- L·ªánh ƒê·∫∑t c∆∞·ª£c (/tai, /xiu) ---
async def place_bet(update: Update, context: ContextTypes.DEFAULT_TYPE, bet_type: str) -> None:
    if update.effective_chat.type == "private":
        await update.message.reply_text("L·ªánh n√†y ch·ªâ c√≥ th·ªÉ s·ª≠ d·ª•ng trong nh√≥m chat.")
        return

    global session_is_active
    if not session_is_active:
        await update.message.reply_text("Hi·ªán kh√¥ng ph·∫£i th·ªùi gian ƒë·∫∑t c∆∞·ª£c. Vui l√≤ng ch·ªù phi√™n m·ªõi b·∫Øt ƒë·∫ßu.")
        return

    args = context.args
    if not args:
        await update.message.reply_text(
            f"‚ö†Ô∏è C√∫ ph√°p sai!\nD√πng /{bet_type} [s·ªë ti·ªÅn/all]\nV√≠ d·ª•: /{bet_type} all ho·∫∑c /{bet_type} 5000"
        )
        return

    user_id = update.effective_user.id
    username = update.effective_user.first_name

    if user_id not in users_data:
        users_data[user_id] = {'balance': 100000, 'username': username}  # S·ªë d∆∞ m·∫∑c ƒë·ªãnh 100000
    
    bet_amount_str = args[0]
    try:
        if bet_amount_str.lower() == 'all':
            bet_amount = users_data[user_id]['balance']
        else:
            bet_amount = int(bet_amount_str)
        
        if bet_amount <= 0:
            await update.message.reply_text("S·ªë ti·ªÅn c∆∞·ª£c ph·∫£i l·ªõn h∆°n 0.")
            return

        if bet_amount > users_data[user_id]['balance']:
            await update.message.reply_text(f"B·∫°n kh√¥ng ƒë·ªß s·ªë d∆∞. S·ªë d∆∞ hi·ªán t·∫°i: {users_data[user_id]['balance']:,} VNƒê")
            return
        
        # L∆∞u c∆∞·ª£c c·ªßa ng∆∞·ªùi d√πng cho phi√™n hi·ªán t·∫°i
        current_bets[user_id] = {'type': bet_type, 'amount': bet_amount, 'username': username}
        users_data[user_id]['balance'] -= bet_amount  # Tr·ª´ ti·ªÅn ngay khi ƒë·∫∑t c∆∞·ª£c

        await update.message.reply_text(
            f"üîµ ƒê√É C∆Ø·ª¢C TH√ÄNH C√îNG üîµ\n"
            f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
            f"üî¢ S·ªë ti·ªÅn: {bet_amount:,} VNƒê\n"
            f"üéØ C∆∞·ª£c v√†o: {bet_type.upper()}\n"
            f"üí∞ S·ªë d∆∞ c√≤n l·∫°i: {users_data[user_id]['balance']:,} VNƒê\n\n"
            f"üìä C·∫ßu hi·ªán t·∫°i: {get_current_pattern()}"
        )

    except ValueError:
        await update.message.reply_text("S·ªë ti·ªÅn kh√¥ng h·ª£p l·ªá. Vui l√≤ng nh·∫≠p s·ªë ho·∫∑c 'all'.")

async def cmd_tai(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await place_bet(update, context, "T√ÄI")

async def cmd_xiu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await place_bet(update, context, "X·ªàU")

# --- L·ªánh ADMIN: M·ªü phi√™n m·ªõi (ch·ªâ trong nh√≥m) ---
async def open_new_game(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if not is_admin(update.effective_user.id):
        await update.message.reply_text("B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng l·ªánh n√†y.")
        return
    
    if update.effective_chat.type == "private":
        await update.message.reply_text("L·ªánh n√†y ch·ªâ d√πng trong nh√≥m.")
        return
    
    global session_is_active, current_session_id, current_bets, active_group_chat_id
    if session_is_active:
        await update.message.reply_text(f"Phi√™n #{current_session_id} ƒëang ho·∫°t ƒë·ªông. Vui l√≤ng k·∫øt th√∫c phi√™n tr∆∞·ªõc b·∫±ng l·ªánh /stop.")
        return

    current_session_id += 1
    session_is_active = True
    current_bets = {}  # Reset c∆∞·ª£c cho phi√™n m·ªõi
    active_group_chat_id = update.effective_chat.id  # L∆∞u chat_id c·ªßa nh√≥m ƒëang ch∆°i

    await update.message.reply_text(
        f"üé∞ PHI√äN #{current_session_id} B·∫ÆT ƒê·∫¶U üé∞\n"
        f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
        f"üìä C·∫ßu hi·ªán t·∫°i: {get_current_pattern()}\n"
        f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
        f"‚è≥ Th·ªùi gian ƒë·∫∑t c∆∞·ª£c: 30 gi√¢y\n"
        f"üí∞ L·ªánh c∆∞·ª£c:\n"
        f"/tai [s·ªë ti·ªÅn/all] - C∆∞·ª£c T√†i (11-18)\n"
        f"/xiu [s·ªë ti·ªÅn/all] - C∆∞·ª£c X·ªâu (3-10)\n"
        f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
        f"üí° Ch·∫ø ƒë·ªô: MD5 Minh B·∫°ch\n"
        f"üé∞ Jackpot: {JACKPOT_AMOUNT:,} VNƒê" 
    )
    # H·∫πn gi·ªù t·ª± ƒë·ªông k·∫øt th√∫c phi√™n sau 30 gi√¢y (c√≥ th·ªÉ ƒëi·ªÅu ch·ªânh)
    context.job_queue.run_once(auto_end_session, 30, chat_id=update.effective_chat.id, name=f"end_session_{current_session_id}")


# --- H√†m k·∫øt th√∫c phi√™n v√† tr·∫£ k·∫øt qu·∫£ ---
async def end_session(update: Update, context: ContextTypes.DEFAULT_TYPE, dice_override=None, target_chat_id=None) -> None:
    # Khai b√°o global ·ªü ƒë·∫ßu h√†m, tr∆∞·ªõc b·∫•t k·ª≥ l·∫ßn truy c·∫≠p n√†o ƒë·∫øn bi·∫øn n√†y
    global session_is_active, last_dice_roll_info, current_bets, JACKPOT_AMOUNT, current_session_id
    
    # L·∫•y chat_id ƒë·ªÉ g·ª≠i tin nh·∫Øn, ∆∞u ti√™n target_chat_id n·∫øu ƒë∆∞·ª£c cung c·∫•p
    chat_id = target_chat_id if target_chat_id else (context.job.chat_id if context.job else update.effective_chat.id)
    
    # Ki·ªÉm tra xem c√≥ phi√™n n√†o ƒëang ho·∫°t ƒë·ªông kh√¥ng
    if not session_is_active and not dice_override: # N·∫øu kh√¥ng c√≥ phi√™n v√† kh√¥ng ph·∫£i l√† l·ªánh can thi·ªáp
        if update and update.effective_chat.type != "private": # Ch·ªâ tr·∫£ l·ªùi n·∫øu c√≥ update v√† kh√¥ng ph·∫£i t·ª´ chat ri√™ng admin
            await update.message.reply_text("Kh√¥ng c√≥ phi√™n n√†o ƒëang ho·∫°t ƒë·ªông ƒë·ªÉ k·∫øt th√∫c.")
        return
    
    session_is_active = False # K·∫øt th√∫c phi√™n
    
    dice_values = dice_override if dice_override else generate_dice_roll()
    result_type, total = calculate_result(dice_values)
    
    random_string = ''.join(random.choices('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789', k=10))
    md5_hash = generate_md5(current_session_id, random_string, dice_values)
    verification_code = f"#{current_session_id} {random_string} {'-'.join(map(str, dice_values))}"

    total_bet_amount = sum(bet['amount'] for bet in current_bets.values())
    total_win_amount = 0
    winners_list = []
    jackpot_winner_info = None
    
    # T√≠ch l≈©y Jackpot t·ª´ t·ªïng c∆∞·ª£c
    JACKPOT_AMOUNT += int(total_bet_amount * JACKPOT_CONTRIBUTION_RATE)

    # X·ª≠ l√Ω th·∫Øng thua
    for user_id, bet_info in current_bets.items():
        if bet_info['type'].upper() == result_type:
            win_amount = bet_info['amount'] * 2 # Th·∫Øng g·∫•p ƒë√¥i ti·ªÅn c∆∞·ª£c
            users_data[user_id]['balance'] += win_amount
            total_win_amount += bet_info['amount'] # T·ªïng ti·ªÅn c∆∞·ª£c th·∫Øng (ph·∫ßn g·ªëc)
            winners_list.append(f"üèÜ {bet_info['username']} +{bet_info['amount']:,} VNƒê")
    
    # Hi·ªÉn th·ªã Jackpot khi n·ªï (v√≠ d·ª• 3 con 6 ho·∫∑c 3 con 1)
    jackpot_status = ""
    if dice_values == [6, 6, 6] or dice_values == [1, 1, 1]:
        # Ch·ªçn ng∆∞·ªùi th·∫Øng Jackpot: ng∆∞·ªùi cu·ªëi c√πng ƒë·∫∑t c∆∞·ª£c trong phi√™n
        if current_bets:
            # L·∫•y key (user_id) cu·ªëi c√πng trong dictionary (python 3.7+ ƒë·∫£m b·∫£o th·ª© t·ª± ch√®n)
            last_bettor_id = list(current_bets.keys())[-1] 
            jackpot_winner_info = users_data[last_bettor_id]
            users_data[last_bettor_id]['balance'] += JACKPOT_AMOUNT # C·ªông Jackpot v√†o s·ªë d∆∞
            jackpot_status = f"\nüéâ N·ªî JACKPOT! üéâ\nNg∆∞·ªùi th·∫Øng Jackpot: {jackpot_winner_info['username']}\nS·ªë ti·ªÅn Jackpot: {JACKPOT_AMOUNT:,} VNƒê"
            JACKPOT_AMOUNT = JACKPOT_MIN_RESET_VALUE # Reset Jackpot sau khi n·ªï
        else:
            jackpot_status = "\n‚ö†Ô∏è N·ªî JACKPOT nh∆∞ng kh√¥ng c√≥ ng∆∞·ªùi ƒë·∫∑t c∆∞·ª£c ƒë·ªÉ nh·∫≠n th∆∞·ªüng! Jackpot s·∫Ω ƒë∆∞·ª£c reset."
            JACKPOT_AMOUNT = JACKPOT_MIN_RESET_VALUE # V·∫´n reset Jackpot

    # L∆∞u th√¥ng tin phi√™n cu·ªëi c√πng ƒë·ªÉ admin bot ri√™ng c√≥ th·ªÉ truy c·∫≠p
    last_dice_roll_info = {
        'dice': dice_values,
        'result_type': result_type,
        'total': total,
        'md5': md5_hash,
        'verification_code': verification_code,
        'total_bet_amount': total_bet_amount,
        'total_win_amount': total_win_amount,
        'winners_list': winners_list,
        'jackpot_status': jackpot_status,
        'session_id': current_session_id
    }

    message_text = (
        f"üéØ PHI√äN #{current_session_id} K·∫æT TH√öC üéØ\n"
        f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
        f"üé≤ X√∫c x·∫Øc: {', '.join(map(str, dice_values))} = {total}\n"
        f"üîÆ K·∫øt qu·∫£: üé≤ {result_type}\n\n"
        f"üîê MD5 Minh b·∫°ch:\n{md5_hash}\n\n"
        f"üîé M√£ x√°c minh:\n{verification_code}\n\n"
        f"‚úÖ X√°c minh: M√£ h√≥a m√£ tr√™n b·∫±ng MD5 s·∫Ω ra k·∫øt qu·∫£ tr√πng kh·ªõp v·ªõi MD5 ƒë√£ c√¥ng b·ªë.\n\n"
        f"üìä T·ªïng c∆∞·ª£c: {total_bet_amount:,} VNƒê\n"
        f"üí∞ T·ªïng th∆∞·ªüng: {total_win_amount:,} VNƒê\n\n"
        f"üéâ Ng∆∞·ªùi th·∫Øng:\n" + ("\n".join(winners_list) if winners_list else "Kh√¥ng c√≥ ng∆∞·ªùi th·∫Øng trong phi√™n n√†y.") + jackpot_status +
        f"\n\nüìä C·∫ßu hi·ªán t·∫°i: {get_current_pattern()}"
    )
    
    await context.bot.send_message(chat_id=chat_id, text=message_text)

    # Sau khi k·∫øt th√∫c, clear c∆∞·ª£c cho phi√™n ti·∫øp theo
    current_bets = {}

# H√†m ƒë∆∞·ª£c g·ªçi t·ª± ƒë·ªông b·ªüi job_queue
async def auto_end_session(context: ContextTypes.DEFAULT_TYPE):
    # D·ª´ng job hi·ªán t·∫°i ƒë·ªÉ tr√°nh ch·∫°y l·∫°i
    # ƒê·∫£m b·∫£o current_session_id ƒë∆∞·ª£c c·∫≠p nh·∫≠t tr∆∞·ªõc khi h·ªßy job
    global current_session_id # Khai b√°o global
    for job in context.job_queue.get_jobs_by_name(f"end_session_{current_session_id}"):
        job.schedule_removal()
    
    # G·ª≠i tin nh·∫Øn k·∫øt th√∫c phi√™n t·ªõi chat_id c·ªßa job
    await end_session(None, context, target_chat_id=context.job.chat_id)

# L·ªánh admin ƒë·ªÉ t·ª± k·∫øt th√∫c phi√™n th·ªß c√¥ng trong nh√≥m (thay v√¨ ƒë·ª£i h·∫πn gi·ªù)
async def admin_end_session_manual(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if not is_admin(update.effective_user.id):
        await update.message.reply_text("B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng l·ªánh n√†y.")
        return
    if update.effective_chat.type == "private":
        await update.message.reply_text("L·ªánh n√†y ch·ªâ d√πng trong nh√≥m.")
        return
    
    # H·ªßy job t·ª± ƒë·ªông k·∫øt th√∫c n·∫øu c√≥
    global current_session_id # Khai b√°o global
    for job in context.job_queue.get_jobs_by_name(f"end_session_{current_session_id}"):
        job.schedule_removal()

    await end_session(update, context, target_chat_id=update.effective_chat.id)

# --- L·ªánh ADMIN (TR√äN BOT RI√äNG): Can thi·ªáp k·∫øt qu·∫£ v√† k·∫øt th√∫c phi√™n ---
async def admin_override_dice(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if not is_admin(update.effective_user.id) or update.effective_chat.type != "private":
        await update.message.reply_text("L·ªánh n√†y ch·ªâ d√†nh cho Admin v√† ch·ªâ s·ª≠ d·ª•ng trong chat ri√™ng v·ªõi bot.")
        return
    
    args = context.args
    if len(args) < 4:
        await update.message.reply_text("C√∫ ph√°p: /setdice [chat_id_nh√≥m] [s·ªë_1] [s·ªë_2] [s·ªë_3]\nV√≠ d·ª•: /setdice -100123456789 6 4 1")
        return
    
    try:
        target_chat_id = int(args[0])
        dice_values = [int(arg) for arg in args[1:4]]
        
        if not all(1 <= d <= 6 for d in dice_values):
            raise ValueError("X√∫c x·∫Øc ph·∫£i l√† s·ªë t·ª´ 1 ƒë·∫øn 6.")
        
        global session_is_active, current_session_id # Khai b√°o global
        if not session_is_active or active_group_chat_id != target_chat_id:
            await update.message.reply_text(f"Hi·ªán kh√¥ng c√≥ phi√™n n√†o ƒëang ho·∫°t ƒë·ªông trong nh√≥m ID {target_chat_id} n√†y.")
            return

        # H·ªßy job t·ª± ƒë·ªông k·∫øt th√∫c n·∫øu c√≥
        for job in context.job_queue.get_jobs_by_name(f"end_session_{current_session_id}"):
            job.schedule_removal()

        # T·∫°o m·ªôt context ·∫£o cho h√†m end_session
        dummy_context = ContextTypes.DEFAULT_TYPE(bot=context.bot, args=context.args, chat_data=context.chat_data, user_data=context.user_data)
        # Gi·∫£ l·∫≠p job cho end_session bi·∫øt chat_id
        dummy_context.job = type('Job', (object,), {'chat_id': target_chat_id, 'name': 'admin_manual_end_session'})()
        
        await end_session(None, dummy_context, dice_override=dice_values, target_chat_id=target_chat_id)
        await update.message.reply_text(f"ƒê√£ can thi·ªáp k·∫øt qu·∫£ phi√™n #{current_session_id} trong nh√≥m {target_chat_id} v·ªõi x√∫c x·∫Øc: {', '.join(map(str, dice_values))}")

    except ValueError as e:
        await update.message.reply_text(f"L·ªói: {e}\nC√∫ ph√°p: /setdice [chat_id_nh√≥m] [s·ªë_1] [s·ªë_2] [s·ªë_3]")
    except Exception as e:
        await update.message.reply_text(f"C√≥ l·ªói x·∫£y ra: {e}")

# --- L·ªánh ADMIN (TR√äN BOT RI√äNG): Xem th√¥ng tin phi√™n cu·ªëi c√πng ---
async def admin_last_session_info(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if not is_admin(update.effective_user.id) or update.effective_chat.type != "private":
        await update.message.reply_text("L·ªánh n√†y ch·ªâ d√†nh cho Admin v√† ch·ªâ s·ª≠ d·ª•ng trong chat ri√™ng v·ªõi bot.")
        return
    
    if not last_dice_roll_info:
        await update.message.reply_text("Ch∆∞a c√≥ th√¥ng tin v·ªÅ phi√™n cu·ªëi c√πng.")
        return

    info = last_dice_roll_info
    message_text = (
        f"--- TH√îNG TIN PHI√äN CU·ªêI C√ôNG #{info['session_id']} ---\n"
        f"üé≤ X√∫c x·∫Øc: {', '.join(map(str, info['dice']))} = {info['total']}\n"
        f"üîÆ K·∫øt qu·∫£: üé≤ {info['result_type']}\n"
        f"üîê MD5: {info['md5']}\n"
        f"üîé M√£ x√°c minh: {info['verification_code']}\n"
        f"üìä T·ªïng c∆∞·ª£c: {info['total_bet_amount']:,} VNƒê\n"
        f"üí∞ T·ªïng th∆∞·ªüng: {info['total_win_amount']:,} VNƒê\n"
        f"üéâ Ng∆∞·ªùi th·∫Øng:\n" + ("\n".join(info['winners_list']) if info['winners_list'] else "Kh√¥ng c√≥ ng∆∞·ªùi th·∫Øng trong phi√™n n√†y.") + info['jackpot_status']
    )
    await update.message.reply_text(message_text)

# --- L·ªánh ADMIN (TR√äN BOT RI√äNG): C·ªông ti·ªÅn cho user ---
async def admin_add_balance(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if not is_admin(update.effective_user.id) or update.effective_chat.type != "private":
        await update.message.reply_text("L·ªánh n√†y ch·ªâ d√†nh cho Admin v√† ch·ªâ s·ª≠ d·ª•ng trong chat ri√™ng v·ªõi bot.")
        return

    args = context.args
    if len(args) != 2:
        await update.message.reply_text("C√∫ ph√°p: /addmoney [user_id] [s·ªë ti·ªÅn]")
        return
    try:
        target_user_id = int(args[0])
        amount = int(args[1])
        if amount <= 0:
            await update.message.reply_text("S·ªë ti·ªÅn ph·∫£i l·ªõn h∆°n 0.")
            return

        if target_user_id not in users_data:
            users_data[target_user_id] = {'balance': 100000, 'username': f"User_{target_user_id}"} # Kh·ªüi t·∫°o v·ªõi 100000
        
        users_data[target_user_id]['balance'] += amount
        await update.message.reply_text(
            f"ƒê√£ c·ªông {amount:,} VNƒê v√†o t√†i kho·∫£n ng∆∞·ªùi d√πng ID: {target_user_id}.\n"
            f"S·ªë d∆∞ hi·ªán t·∫°i c·ªßa h·ªç: {users_data[target_user_id]['balance']:,} VNƒê"
        )
    except ValueError:
        await update.message.reply_text("ID ng∆∞·ªùi d√πng ho·∫∑c s·ªë ti·ªÅn kh√¥ng h·ª£p l·ªá.")

# --- L·ªánh ADMIN (TR√äN BOT RI√äNG): Tr·ª´ ti·ªÅn c·ªßa user ---
async def admin_remove_balance(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if not is_admin(update.effective_user.id) or update.effective_chat.type != "private":
        await update.message.reply_text("L·ªánh n√†y ch·ªâ d√†nh cho Admin v√† ch·ªâ s·ª≠ d·ª•ng trong chat ri√™ng v·ªõi bot.")
        return

    args = context.args
    if len(args) != 2:
        await update.message.reply_text("C√∫ ph√°p: /removemoney [user_id] [s·ªë ti·ªÅn]")
        return
    try:
        target_user_id = int(args[0])
        amount = int(args[1])
        if amount <= 0:
            await update.message.reply_text("S·ªë ti·ªÅn ph·∫£i l·ªõn h∆°n 0.")
            return

        if target_user_id not in users_data:
            await update.message.reply_text(f"Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng v·ªõi ID: {target_user_id}.")
            return

        if users_data[target_user_id]['balance'] < amount:
            await update.message.reply_text(f"Ng∆∞·ªùi d√πng ID {target_user_id} kh√¥ng ƒë·ªß s·ªë d∆∞ ƒë·ªÉ tr·ª´ (c√≤n {users_data[target_user_id]['balance']:,} VNƒê).")
            return

        users_data[target_user_id]['balance'] -= amount
        await update.message.reply_text(
            f"ƒê√£ tr·ª´ {amount:,} VNƒê kh·ªèi t√†i kho·∫£n ng∆∞·ªùi d√πng ID: {target_user_id}.\n"
            f"S·ªë d∆∞ hi·ªán t·∫°i c·ªßa h·ªç: {users_data[target_user_id]['balance']:,} VNƒê"
        )
    except ValueError:
        await update.message.reply_text("ID ng∆∞·ªùi d√πng ho·∫∑c s·ªë ti·ªÅn kh√¥ng h·ª£p l·ªá.")

# --- L·ªánh ADMIN (TR√äN BOT RI√äNG): Ch·ªânh Jackpot ---
async def admin_set_jackpot(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if not is_admin(update.effective_user.id) or update.effective_chat.type != "private":
        await update.message.reply_text("L·ªánh n√†y ch·ªâ d√†nh cho Admin v√† ch·ªâ s·ª≠ d·ª•ng trong chat ri√™ng v·ªõi bot.")
        return

    args = context.args
    if len(args) != 1:
        await update.message.reply_text("C√∫ ph√°p: /setjackpot [s·ªë ti·ªÅn]\nV√≠ d·ª•: /setjackpot 1000000000000")
        return
    try:
        new_jackpot_value = int(args[0])
        if new_jackpot_value < 0:
            await update.message.reply_text("S·ªë ti·ªÅn Jackpot kh√¥ng th·ªÉ √¢m.")
            return
        
        global JACKPOT_AMOUNT
        JACKPOT_AMOUNT = new_jackpot_value
        await update.message.reply_text(f"Jackpot ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t th√†nh: {JACKPOT_AMOUNT:,} VNƒê")
    except ValueError:
        await update.message.reply_text("S·ªë ti·ªÅn Jackpot kh√¥ng h·ª£p l·ªá.")

# --- L·ªánh Ng∆∞·ªùi d√πng: B·∫£ng x·∫øp h·∫°ng (/top) ---
async def top_players(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if not users_data:
        await update.message.reply_text("Ch∆∞a c√≥ d·ªØ li·ªáu ng∆∞·ªùi ch∆°i ƒë·ªÉ x·∫øp h·∫°ng.")
        return
    
    # S·∫Øp x·∫øp ng∆∞·ªùi ch∆°i theo s·ªë d∆∞ gi·∫£m d·∫ßn
    sorted_users = sorted(users_data.items(), key=lambda item: item[1]['balance'], reverse=True)
    
    top_message = "üèÜ B·∫¢NG X·∫æP H·∫†NG NG∆Ø·ªúI CH∆†I üèÜ\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
    for i, (user_id, data) in enumerate(sorted_users[:5]): # L·∫•y top 5
        top_message += f"{i+1}. {data['username']}: {data['balance']:,} VNƒê\n"
    
    await update.message.reply_text(top_message)

# --- L·ªánh Ng∆∞·ªùi d√πng: Xem Jackpot (/jackpot) ---
async def view_jackpot(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    global JACKPOT_AMOUNT
    await update.message.reply_text(f"üí∞ TI·ªÄN H≈® JACKPOT HI·ªÜN T·∫†I: {JACKPOT_AMOUNT:,} VNƒê")

# --- L·ªánh Ng∆∞·ªùi d√πng: Ch·∫ø ƒë·ªô th∆∞·ªùng (/taixiu) ---
async def taixiu_info(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    info_text = """
üé≤ CH·∫æ ƒê·ªò T√ÄI X·ªàU TH∆Ø·ªúNG üé≤
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
‚Ä¢ ƒê·∫∑t c∆∞·ª£c v√†o T√ÄI (t·ªïng 11-18) ho·∫∑c X·ªàU (t·ªïng 3-10).
‚Ä¢ C√≥ c∆° h·ªôi n·ªï JACKPOT khi ra 3 con 1 ho·∫∑c 3 con 6.
‚Ä¢ L·ªánh ƒë·∫∑t c∆∞·ª£c:
  ‚Ä¢ /tai [s·ªë ti·ªÅn/all]
  ‚Ä¢ /xiu [s·ªë ti·ªÅn/all]
"""
    await update.message.reply_text(info_text)

# --- L·ªánh Ng∆∞·ªùi d√πng: Ch·∫ø ƒë·ªô MD5 minh b·∫°ch (/taixiumd5) ---
async def taixiumd5_info(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    info_text = """
üí° CH·∫æ ƒê·ªò MD5 MINH B·∫†CH üí°
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
‚Ä¢ K·∫øt qu·∫£ m·ªói phi√™n ƒë∆∞·ª£c t·∫°o ra d·ª±a tr√™n m·ªôt chu·ªói ng·∫´u nhi√™n v√† ID phi√™n, sau ƒë√≥ ƒë∆∞·ª£c m√£ h√≥a b·∫±ng MD5.
‚Ä¢ M√£ MD5 ƒë∆∞·ª£c c√¥ng b·ªë TR∆Ø·ªöC KHI m·ªü b√°t, ƒë·∫£m b·∫£o t√≠nh c√¥ng b·∫±ng.
‚Ä¢ Sau khi phi√™n k·∫øt th√∫c, bot s·∫Ω c√¥ng b·ªë m√£ x√°c minh ƒë·∫ßy ƒë·ªß (ID phi√™n + chu·ªói ng·∫´u nhi√™n + k·∫øt qu·∫£ x√∫c x·∫Øc). B·∫°n c√≥ th·ªÉ t·ª± m√£ h√≥a m√£ x√°c minh b·∫±ng MD5 ƒë·ªÉ ki·ªÉm tra tr√πng kh·ªõp v·ªõi m√£ ƒë√£ c√¥ng b·ªë.
‚Ä¢ L·ªánh ƒë·∫∑t c∆∞·ª£c:
  ‚Ä¢ /tai [s·ªë ti·ªÅn/all]
  ‚Ä¢ /xiu [s·ªë ti·ªÅn/all]
"""
    await update.message.reply_text(info_text)

# --- L·ªánh Ng∆∞·ªùi d√πng: Chuy·ªÉn ti·ªÅn (/chuyen) ---
async def transfer_money(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    args = context.args
    if len(args) != 2:
        await update.message.reply_text("C√∫ ph√°p: /chuyen [ID ng∆∞·ªùi nh·∫≠n] [s·ªë ti·ªÅn]")
        return
    
    sender_id = update.effective_user.id
    sender_username = update.effective_user.first_name

    if sender_id not in users_data:
        users_data[sender_id] = {'balance': 100000, 'username': sender_username}

    try:
        receiver_id = int(args[0])
        amount = int(args[1])

        if amount <= 0:
            await update.message.reply_text("S·ªë ti·ªÅn chuy·ªÉn ph·∫£i l·ªõn h∆°n 0.")
            return

        if sender_id == receiver_id:
            await update.message.reply_text("B·∫°n kh√¥ng th·ªÉ t·ª± chuy·ªÉn ti·ªÅn cho ch√≠nh m√¨nh.")
            return

        if users_data[sender_id]['balance'] < amount:
            await update.message.reply_text(f"B·∫°n kh√¥ng ƒë·ªß s·ªë d∆∞ ƒë·ªÉ chuy·ªÉn. S·ªë d∆∞ hi·ªán t·∫°i: {users_data[sender_id]['balance']:,} VNƒê")
            return
        
        # T·∫°o t√†i kho·∫£n n·∫øu ng∆∞·ªùi nh·∫≠n ch∆∞a c√≥
        if receiver_id not in users_data:
            users_data[receiver_id] = {'balance': 100000, 'username': f"User_{receiver_id}"}
        
        users_data[sender_id]['balance'] -= amount
        users_data[receiver_id]['balance'] += amount

        await update.message.reply_text(
            f"‚úÖ GIAO D·ªäCH TH√ÄNH C√îNG ‚úÖ\n"
            f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
            f"Ng∆∞·ªùi chuy·ªÉn: {sender_username}\n"
            f"Ng∆∞·ªùi nh·∫≠n (ID): {receiver_id}\n"
            f"S·ªë ti·ªÅn: {amount:,} VNƒê\n"
            f"S·ªë d∆∞ c·ªßa b·∫°n: {users_data[sender_id]['balance']:,} VNƒê"
        )
        # T√πy ch·ªçn: th√¥ng b√°o cho ng∆∞·ªùi nh·∫≠n (n·∫øu bot c√≥ th·ªÉ nh·∫Øn tin ri√™ng cho h·ªç)
        try:
            receiver_username = users_data[receiver_id].get('username', f"User_{receiver_id}")
            await context.bot.send_message(
                chat_id=receiver_id, 
                text=f"B·∫°n v·ª´a nh·∫≠n ƒë∆∞·ª£c {amount:,} VNƒê t·ª´ {sender_username}.\nS·ªë d∆∞ hi·ªán t·∫°i c·ªßa b·∫°n: {users_data[receiver_id]['balance']:,} VNƒê"
            )
        except Exception as e:
            logger.warning(f"Kh√¥ng th·ªÉ g·ª≠i th√¥ng b√°o chuy·ªÉn ti·ªÅn ƒë·∫øn ng∆∞·ªùi nh·∫≠n {receiver_id}: {e}")

    except ValueError:
        await update.message.reply_text("ID ng∆∞·ªùi nh·∫≠n ho·∫∑c s·ªë ti·ªÅn kh√¥ng h·ª£p l·ªá. Vui l√≤ng nh·∫≠p s·ªë.")

# --- L·ªánh /help (Ng∆∞·ªùi d√πng) ---
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    help_text = """
‚ú® ‚ô¶Ô∏è SUNWIN CASINO - H∆Ø·ªöNG D·∫™N S·ª¨ D·ª§NG ‚ô¶Ô∏è ‚ú®
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
üé≤ T√ÄI X·ªàU ONLINE - UY T√çN H√ÄNG ƒê·∫¶U üé≤
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
üìå L·ªÜNH C∆† B·∫¢N:
‚Ä¢ /start - B·∫Øt ƒë·∫ßu t∆∞∆°ng t√°c v·ªõi bot v√† xem h∆∞·ªõng d·∫´n c∆° b·∫£n
‚Ä¢ /help - Xem h∆∞·ªõng d·∫´n chi ti·∫øt c√°c l·ªánh
‚Ä¢ /check - Ki·ªÉm tra s·ªë d∆∞ hi·ªán t·∫°i c·ªßa b·∫°n
‚Ä¢ /top - B·∫£ng x·∫øp h·∫°ng ng∆∞·ªùi ch∆°i
‚Ä¢ /jackpot - Xem ti·ªÅn h≈© Jackpot hi·ªán t·∫°i

üéØ L·ªÜNH CH∆†I:
‚Ä¢ /taixiu - Ch·∫ø ƒë·ªô th∆∞·ªùng (c√≥ JACKPOT)
‚Ä¢ /taixiumd5 - Ch·∫ø ƒë·ªô MD5 minh b·∫°ch
‚Ä¢ /tai [s·ªë ti·ªÅn/all] - C∆∞·ª£c T√ÄI (11-18)
‚Ä¢ /xiu [s·ªë ti·ªÅn/all] - C∆∞·ª£c X·ªàU (3-10)

üîß L·ªÜNH ADMIN:
(Ch·ªâ admin m·ªõi s·ª≠ d·ª•ng ƒë∆∞·ª£c v√† m·ªôt s·ªë l·ªánh ch·ªâ d√πng trong chat ri√™ng v·ªõi bot)
‚Ä¢ /newgame - M·ªü phi√™n m·ªõi (trong nh√≥m)
‚Ä¢ /stop - D·ª´ng tr√≤ ch∆°i (trong nh√≥m)
‚Ä¢ /addmoney [id] [s·ªë ti·ªÅn] - N·∫°p ti·ªÅn cho ng∆∞·ªùi d√πng (chat ri√™ng)
‚Ä¢ /removemoney [id] [s·ªë ti·ªÅn] - Tr·ª´ ti·ªÅn c·ªßa ng∆∞·ªùi d√πng (chat ri√™ng)
‚Ä¢ /chuyen [id] [s·ªë ti·ªÅn] - Chuy·ªÉn ti·ªÅn cho ng∆∞·ªùi d√πng kh√°c (ch·ªâ ng∆∞·ªùi d√πng, kh√¥ng ph·∫£i admin)
‚Ä¢ /setdice [chat_id_nh√≥m] [s1] [s2] [s3] - Can thi·ªáp k·∫øt qu·∫£ x√∫c x·∫Øc (chat ri√™ng)
‚Ä¢ /lastgame - Xem th√¥ng tin phi√™n cu·ªëi c√πng (chat ri√™ng)
‚Ä¢ /setjackpot [s·ªë ti·ªÅn] - ƒê·∫∑t l·∫°i gi√° tr·ªã Jackpot (chat ri√™ng)
"""
    await update.message.reply_text(help_text)

# --- Main function ƒë·ªÉ ch·∫°y bot ---
def main() -> None:
    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()

    # Handlers cho ng∆∞·ªùi d√πng (trong nh√≥m v√† ri√™ng t∆∞)
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command)) 
    application.add_handler(CommandHandler("check", check_balance)) 
    application.add_handler(CommandHandler("top", top_players)) # Tri·ªÉn khai /top
    application.add_handler(CommandHandler("jackpot", view_jackpot)) # Tri·ªÉn khai /jackpot
    application.add_handler(CommandHandler("taixiu", taixiu_info)) # Tri·ªÉn khai /taixiu
    application.add_handler(CommandHandler("taixiumd5", taixiumd5_info)) # Tri·ªÉn khai /taixiumd5
    application.add_handler(CommandHandler("chuyen", transfer_money)) # Tri·ªÉn khai /chuyen

    # Handlers cho l·ªánh ƒë·∫∑t c∆∞·ª£c (ch·ªâ trong nh√≥m)
    application.add_handler(CommandHandler("tai", cmd_tai, filters=filters.ChatType.GROUPS))
    application.add_handler(CommandHandler("xiu", cmd_xiu, filters=filters.ChatType.GROUPS))

    # Handlers cho ADMIN (trong nh√≥m)
    application.add_handler(CommandHandler("newgame", open_new_game, filters=filters.ChatType.GROUPS))
    application.add_handler(CommandHandler("stop", admin_end_session_manual, filters=filters.ChatType.GROUPS))
    
    # Handlers cho ADMIN (trong chat ri√™ng v·ªõi bot)
    application.add_handler(CommandHandler("setdice", admin_override_dice, filters=filters.ChatType.PRIVATE))
    application.add_handler(CommandHandler("addmoney", admin_add_balance, filters=filters.ChatType.PRIVATE))
    application.add_handler(CommandHandler("removemoney", admin_remove_balance, filters=filters.ChatType.PRIVATE))
    application.add_handler(CommandHandler("lastgame", admin_last_session_info, filters=filters.ChatType.PRIVATE))
    application.add_handler(CommandHandler("setjackpot", admin_set_jackpot, filters=filters.ChatType.PRIVATE))


    # Ch·∫°y bot
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == "__main__":
    # Kh·ªüi t·∫°o m·ªôt s·ªë d·ªØ li·ªáu ban ƒë·∫ßu cho admin ƒë·ªÉ test
    for admin_id in ADMIN_IDS:
        if admin_id not in users_data:
            users_data[admin_id] = {'balance': 999999999999999999, 'username': f"Admin_{admin_id}"} # Admin c√≥ nhi·ªÅu ti·ªÅn h∆°n
    main()
