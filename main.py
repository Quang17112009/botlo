import telebot
from telebot.types import ChatPermissions
import requests
import random
import os
from telebot.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardButton, InlineKeyboardMarkup
from datetime import datetime, timedelta, date
import time
import atexit
from telebot import TeleBot, types
import pytz
import threading
from threading import Timer
import json
import re
import traceback
import schedule # ƒê·∫£m b·∫£o ƒë√£ c√†i ƒë·∫∑t: pip install schedule
from telebot.apihelper import ApiException
from collections import defaultdict
from apscheduler.schedulers.background import BackgroundScheduler # ƒê·∫£m b·∫£o ƒë√£ c√†i ƒë·∫∑t: pip install APScheduler
from apscheduler.triggers.cron import CronTrigger

# =====================--------------(TOKEN BOT)--------------=====================
# THAY TH·∫æ C√ÅC TOKEN N√ÄY B·∫∞NG TOKEN TH·ª∞C T·∫æ C·ª¶A B·∫†N
# L∆ØU √ù: L·ªói 401 Unauthorized th∆∞·ªùng do TOKEN SAI ho·∫∑c H·∫æT H·∫†N.
# VUI L√íNG KI·ªÇM TRA L·∫†I T·∫§T C·∫¢ C√ÅC TOKEN T·ª™ BOTFATHER ƒê·ªÇ ƒê·∫¢M B·∫¢O CH√çNH X√ÅC.
API_BOT = '7324552224:AAGcEd3dg5OZuIs0bJF6QFfa4B3lgNq2rh8' # Bot ch√≠nh (d√πng cho l·ªánh /congtien v√† th√¥ng b√°o ri√™ng cho admin)
API_BOT2 = '7975395053:AAE6xhLQ-y6BJTlvrNgWjOOWSnZMZ40AxTw' # Bot ph√≤ng game T√†i X·ªâu
API_BOT3 = '8027877843:AAG1z9OcCkdz8jcT3KnWuKi6BCZvlJhxu2s' # Bot th√¥ng b√°o (c√≥ th·ªÉ kh√¥ng c·∫ßn n·∫øu ch·ªâ g·ª≠i ri√™ng admin)

# Kh·ªüi t·∫°o c√°c bot
bot = telebot.TeleBot(API_BOT, parse_mode='HTML') # Thi·∫øt l·∫≠p parse_mode m·∫∑c ƒë·ªãnh l√† HTML
bot2 = telebot.TeleBot(API_BOT2, parse_mode='HTML') # Thi·∫øt l·∫≠p parse_mode m·∫∑c ƒë·ªãnh l√† HTML
bot3 = telebot.TeleBot(API_BOT3, parse_mode='HTML') # Thi·∫øt l·∫≠p parse_mode m·∫∑c ƒë·ªãnh l√† HTML

# =====================--------------(C·∫•u h√¨nh Admin v√† Nh√≥m)--------------=====================
ADMIN_ID = 6915752059 # THAY TH·∫æ B·∫∞NG ID TELEGRAM C·ª¶A ADMIN
# L∆ØU √ù: L·ªói "chat not found" th∆∞·ªùng do ID nh√≥m sai ho·∫∑c bot kh√¥ng c√≥ quy·ªÅn admin trong nh√≥m.
# H√ÉY ƒê·∫¢M B·∫¢O BOT ƒê∆Ø·ª¢C TH√äM V√ÄO NH√ìM V√Ä ƒê∆Ø·ª¢C C·∫§P QUY·ªÄN ADMIN ƒê·∫¶Y ƒê·ª¶.
GAME_ROOM_ID = -1002781947864 # ID nh√≥m ph√≤ng game T√†i X·ªâu
RESULT_CHANNEL_ID = -1002781947864 # ID nh√≥m/k√™nh th√¥ng b√°o k·∫øt qu·∫£ ph√≤ng game (c√≥ th·ªÉ tr√πng GAME_ROOM_ID ho·∫∑c l√† k√™nh ri√™ng)

# =====================--------------(Bi·∫øn to√†n c·ª•c)--------------=====================
user_balance = {}
user_bets = {} # L∆∞u tr·ªØ c∆∞·ª£c c·ªßa ng∆∞·ªùi ch∆°i trong phi√™n hi·ªán t·∫°i
current_session = 1
session_results = [] # L·ªãch s·ª≠ k·∫øt qu·∫£ c√°c phi√™n (ch·ªâ gi·ªØ 10 phi√™n g·∫ßn nh·∫•t)
processed_users = set() # Theo d√µi ng∆∞·ªùi ch∆°i ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω th·∫Øng/thua trong phi√™n
accepting_bets = False # Tr·∫°ng th√°i cho ph√©p ƒë·∫∑t c∆∞·ª£c

# =====================--------------(Kho L∆∞u S·ªë D∆∞)--------------=====================

def save_balance_to_file():
    """L∆∞u s·ªë d∆∞ c·ªßa ng∆∞·ªùi d√πng v√†o file sodu.txt"""
    try:
        with open("sodu.txt", "w") as f:
            for user_id, balance in user_balance.items():
                f.write(f"{user_id} {int(balance)}\n") # L∆∞u d∆∞·ªõi d·∫°ng s·ªë nguy√™n
    except Exception as e:
        print(f"L·ªói khi l∆∞u s·ªë d∆∞ v√†o file: {e}")

def load_balance_from_file():
    """T·∫£i s·ªë d∆∞ c·ªßa ng∆∞·ªùi d√πng t·ª´ file sodu.txt"""
    global user_balance
    if not os.path.exists("sodu.txt"):
        try:
            open("sodu.txt", "a").close() # T·∫°o file n·∫øu ch∆∞a t·ªìn t·∫°i
        except Exception as e:
            print(f"L·ªói khi t·∫°o file sodu.txt: {e}")
            return
            
    try:
        with open("sodu.txt", "r") as f:
            for line in f:
                line = line.strip()
                if line:
                    try:
                        user_id, balance_str = line.split()
                        user_balance[int(user_id)] = int(float(balance_str)) # ƒê·∫£m b·∫£o l√† s·ªë nguy√™n
                    except ValueError:
                        print(f"L·ªói ƒë·ªçc d√≤ng trong sodu.txt: '{line}' - ƒë·ªãnh d·∫°ng kh√¥ng h·ª£p l·ªá.")
    except Exception as e:
        print(f"L·ªói khi t·∫£i s·ªë d∆∞ t·ª´ file: {e}")

# T·∫£i s·ªë d∆∞ khi bot kh·ªüi ƒë·ªông
load_balance_from_file()

# ƒêƒÉng k√Ω h√†m save_balance_to_file ƒë·ªÉ ch·∫°y khi script k·∫øt th√∫c
atexit.register(save_balance_to_file)

# =====================--------------(Qu·∫£n l√Ω Phi√™n Game)--------------=====================

def save_session_to_file():
    """L∆∞u s·ªë phi√™n hi·ªán t·∫°i v√†o file phien.txt"""
    try:
        with open("phien.txt", "w") as file:
            file.write(str(current_session))
    except Exception as e:
        print(f"L·ªói khi l∆∞u s·ªë phi√™n v√†o file: {e}")

def load_session_from_file():
    """T·∫£i s·ªë phi√™n hi·ªán t·∫°i t·ª´ file phien.txt"""
    global current_session
    if not os.path.exists("phien.txt"):
        try:
            open("phien.txt", "a").close() # T·∫°o file n·∫øu ch∆∞a t·ªìn t·∫°i
        except Exception as e:
            print(f"L·ªói khi t·∫°o file phien.txt: {e}")
            current_session = 1
            return
            
    try:
        with open("phien.txt", "r") as file:
            content = file.read().strip()
            if content:
                current_session = int(content)
            else:
                current_session = 1
                save_session_to_file()
    except ValueError:
        print("N·ªôi dung file phien.txt kh√¥ng h·ª£p l·ªá. ƒê·∫∑t l·∫°i phi√™n = 1.")
        current_session = 1 # Reset n·∫øu n·ªôi dung file kh√¥ng h·ª£p l·ªá
        save_session_to_file()
    except Exception as e:
        print(f"L·ªói khi t·∫£i s·ªë phi√™n t·ª´ file: {e}")
        current_session = 1 # ƒê·∫£m b·∫£o c√≥ gi√° tr·ªã m·∫∑c ƒë·ªãnh n·∫øu c√≥ l·ªói
        save_session_to_file()


def save_session_history_to_file():
    """L∆∞u l·ªãch s·ª≠ 10 phi√™n g·∫ßn nh·∫•t v√†o file matphien.txt"""
    try:
        last_10_sessions = session_results[-10:]
        display_last_10 = " ".join(
            ["üîµ" if session == 'T' else "üî¥" for session in last_10_sessions])
        with open("matphien.txt", "w", encoding='utf-8') as file:
            file.write(display_last_10)
    except Exception as e:
        print(f"L·ªói khi l∆∞u l·ªãch s·ª≠ phi√™n v√†o file: {e}")

def load_session_history_from_file():
    """T·∫£i l·ªãch s·ª≠ phi√™n t·ª´ file matphien.txt"""
    global session_results
    if not os.path.exists("matphien.txt"):
        try:
            open("matphien.txt", "a", encoding='utf-8').close() # T·∫°o file n·∫øu ch∆∞a c√≥
        except Exception as e:
            print(f"L·ªói khi t·∫°o file matphien.txt: {e}")
            session_results = []
            return

    try:
        with open("matphien.txt", "r", encoding='utf-8') as file:
            session_history_str = file.read().strip()
            if session_history_str:
                session_history = session_history_str.split()
                session_results = [
                    'T' if s == 'üîµ' else 'X'
                    for s in session_history
                ]
            else:
                session_results = []
    except Exception as e:
        print(f"L·ªói khi t·∫£i l·ªãch s·ª≠ phi√™n t·ª´ file: {e}")
        session_results = [] # ƒê·∫£m b·∫£o session_results l√† m·ªôt list r·ªóng n·∫øu c√≥ l·ªói

# T·∫£i d·ªØ li·ªáu phi√™n khi bot kh·ªüi ƒë·ªông
load_session_from_file()
load_session_history_from_file()

# =====================--------------(H√†m h·ªó tr·ª£ Game)--------------=====================

def send_dice_room_reply(chat_id):
    """G·ª≠i x√∫c x·∫Øc v√† tr·∫£ v·ªÅ gi√° tr·ªã"""
    try:
        message = bot2.send_dice(chat_id=chat_id, emoji="üé≤")
        return message.dice.value
    except ApiException as e:
        print(f"L·ªói API khi g·ª≠i x√∫c x·∫Øc: {e}")
        return None
    except Exception as e:
        print(f"L·ªói kh√¥ng x√°c ƒë·ªãnh khi g·ª≠i x√∫c x·∫Øc: {e}")
        return None

def check_result(dice_sum):
    """Ki·ªÉm tra k·∫øt qu·∫£ T√†i/X·ªâu t·ª´ t·ªïng ƒëi·ªÉm x√∫c x·∫Øc"""
    if 11 <= dice_sum <= 18:
        return 'T' # T√†i
    elif 3 <= dice_sum <= 10:
        return 'X' # X·ªâu
    return 'None' # Tr∆∞·ªùng h·ª£p kh√¥ng th·ªÉ x·∫£y ra v·ªõi 3 x√∫c x·∫Øc

def check_result_text(dice_sum):
    """Tr·∫£ v·ªÅ chu·ªói 'T√ÄI' ho·∫∑c 'X·ªàU'"""
    if 11 <= dice_sum <= 18:
        return 'T√ÄI'
    elif 3 <= dice_sum <= 10:
        return 'X·ªàU'
    return 'Kh√¥ng x√°c ƒë·ªãnh'

def escape_html(text):
    """Tho√°t c√°c k√Ω t·ª± ƒë·∫∑c bi·ªát trong HTML"""
    return text.replace('&', '&amp;').replace('<', '&lt;').replace('>', '&gt;')

def confirm_bet(user_id, bet_type, bet_amount, original_message_id, is_anonymous=False):
    """X√°c nh·∫≠n v√† x·ª≠ l√Ω ƒë·∫∑t c∆∞·ª£c c·ªßa ng∆∞·ªùi ch∆°i"""
    global current_session
    global user_balance

    if user_balance.get(user_id, 0) < bet_amount:
        if is_anonymous:
            bot2.send_message(GAME_ROOM_ID, f"‚ùå (·∫®n Danh) Kh√¥ng ƒë·ªß s·ªë d∆∞ ƒë·ªÉ ƒë·∫∑t c∆∞·ª£c.")
        else:
            encoded_user_id = f"***{str(user_id)[-4:]}"
            bot2.send_message(GAME_ROOM_ID, f"‚ùå {encoded_user_id} Kh√¥ng ƒë·ªß s·ªë d∆∞ ƒë·ªÉ ƒë·∫∑t c∆∞·ª£c.", reply_to_message_id=original_message_id)
        return False

    if user_id not in user_bets:
        user_bets[user_id] = {'T': 0, 'X': 0}

    opposite_bet_type = 'T' if bet_type.upper() == 'X' else 'X'
    if user_bets[user_id][opposite_bet_type] > 0:
        bot2.send_message(GAME_ROOM_ID, "‚ùå Kh√¥ng ƒë∆∞·ª£c c∆∞·ª£c c·∫£ hai b√™n trong m·ªôt phi√™n.", reply_to_message_id=original_message_id)
        return False

    user_bets[user_id][bet_type.upper()] += bet_amount
    user_balance[user_id] -= bet_amount
    save_balance_to_file()

    encoded_user_id = f"***{str(user_id)[-4:]}"
    remaining_balance = user_balance[user_id]

    if is_anonymous:
        confirmation_message = (
            f"üèÆ <b>ƒê·∫∑t th√†nh c√¥ng k·ª≥ XX #{current_session}</b>\n"
            f"L·ªánh {bet_type}\n"
            f"S·ªë ti·ªÅn c∆∞·ª£c: <code>{int(bet_amount):,}</code>\n"
            f"Ng∆∞·ªùi c∆∞·ª£c: <code>(·∫®n Danh)</code>"
        )
        bot2.send_message(GAME_ROOM_ID, confirmation_message)
    else:
        confirmation_message = (
            f"üèÆ <b>ƒê·∫∑t th√†nh c√¥ng k·ª≥ #{current_session}</b>\n"
            f"L·ªánh {bet_type}\n"
            f"S·ªë ti·ªÅn c∆∞·ª£c: <code>{int(bet_amount):,}</code>\n"
            f"Ng∆∞·ªùi c∆∞·ª£c: <code>({encoded_user_id})</code>"
        )
        bot2.send_message(GAME_ROOM_ID, confirmation_message, reply_to_message_id=original_message_id)

    confirmation_message_private = (
        f"üèÆ <b>B·∫°n ƒë·∫∑t th√†nh c√¥ng k·ª≥ XX #{current_session}</b>\n"
        f"L·ªánh: {bet_type} - {int(bet_amount):,}\n"
        f"S·ªë d∆∞ c√≤n l·∫°i: {int(remaining_balance):,}"
    )
    try:
        bot.send_message(chat_id=user_id, text=confirmation_message_private)
    except ApiException as e:
        print(f"Kh√¥ng th·ªÉ g·ª≠i tin nh·∫Øn x√°c nh·∫≠n ri√™ng cho ng∆∞·ªùi d√πng {user_id}: {e}")

    return True

def calculate_user_winnings(user_id, game_result):
    """T√≠nh to√°n ti·ªÅn th·∫Øng cho ng∆∞·ªùi ch∆°i"""
    winnings = 0
    if user_id in user_bets:
        if game_result == 'T' and user_bets[user_id]['T'] > 0:
            winnings = 1.95 * user_bets[user_id]['T']
        elif game_result == 'X' and user_bets[user_id]['X'] > 0:
            winnings = 1.95 * user_bets[user_id]['X']
    user_balance[user_id] = user_balance.get(user_id, 0) + winnings
    return winnings

def calculate_user_losses(user_id, game_result):
    """T√≠nh to√°n ti·ªÅn thua cho ng∆∞·ªùi ch∆°i"""
    losses = 0
    if user_id in user_bets:
        if game_result == 'T' and user_bets[user_id]['X'] > 0: # C∆∞·ª£c X thua n·∫øu ra T
            losses = user_bets[user_id]['X']
        elif game_result == 'X' and user_bets[user_id]['T'] > 0: # C∆∞·ª£c T thua n·∫øu ra X
            losses = user_bets[user_id]['T']
    return losses

def turn_on_group_chat():
    """B·∫≠t quy·ªÅn g·ª≠i tin nh·∫Øn trong nh√≥m game"""
    permissions = ChatPermissions(can_send_messages=True)
    try:
        bot2.set_chat_permissions(GAME_ROOM_ID, permissions)
    except ApiException as e:
        print(f"L·ªói API khi b·∫≠t quy·ªÅn nh·∫Øn tin trong nh√≥m {GAME_ROOM_ID}: {e}. ƒê·∫£m b·∫£o bot l√† admin.")
    except Exception as e:
        print(f"L·ªói kh√¥ng x√°c ƒë·ªãnh khi b·∫≠t quy·ªÅn nh·∫Øn tin: {e}")

def turn_off_group_chat():
    """T·∫Øt quy·ªÅn g·ª≠i tin nh·∫Øn trong nh√≥m game"""
    permissions = ChatPermissions(can_send_messages=False)
    try:
        bot2.set_chat_permissions(GAME_ROOM_ID, permissions)
    except ApiException as e:
        print(f"L·ªói API khi t·∫Øt quy·ªÅn nh·∫Øn tin trong nh√≥m {GAME_ROOM_ID}: {e}. ƒê·∫£m b·∫£o bot l√† admin.")
    except Exception as e:
        print(f"L·ªói kh√¥ng x√°c ƒë·ªãnh khi t·∫Øt quy·ªÅn nh·∫Øn tin: {e}")

# =====================--------------(Lu·ªìng Game)--------------=====================

def start_game():
    """B·∫Øt ƒë·∫ßu m·ªôt phi√™n game m·ªõi"""
    global current_session, accepting_bets, user_bets, processed_users
    
    # Reset d·ªØ li·ªáu cho phi√™n m·ªõi
    user_bets.clear()
    processed_users.clear()

    current_session += 1
    save_session_to_file() # L∆∞u s·ªë phi√™n ngay l·∫≠p t·ª©c

    accepting_bets = True

    turn_on_group_chat()
    
    # G·ª≠i th√¥ng b√°o b·∫Øt ƒë·∫ßu phi√™n c∆∞·ª£c (s·ª≠ d·ª•ng HTML)
    try:
        bot2.send_message(
            GAME_ROOM_ID,
            f"<blockquote><b>M·ªùi B·∫°n ƒê·∫∑t C∆∞·ª£c Phi√™n #{current_session}</b></blockquote>\n\n"
            f"&#x25CF; <b>C√°ch Ch∆°i</b>: <code>T [s·ªë ti·ªÅn]</code> ho·∫∑c <code>X [s·ªë ti·ªÅn]</code>\n"
            f"&#x25CF; <b>V√≠ D·ª•</b>: <code>T 10000</code> &amp; <code>X 10000</code>\n\n"
            f"&#x25CF; <b>Tr·∫£ th∆∞·ªüng</b> cho ng∆∞·ªùi th·∫Øng <b>x1.95</b>\n"
            f"&#x25CF; <b>Ch·ªâ ƒë∆∞·ª£c c∆∞·ª£c 1 m·∫∑t</b> trong phi√™n\n"
            f"&#x25CF; <b>Min c∆∞·ª£c</b>: 3.000 VNƒê - <b>Max c∆∞·ª£c</b>: 300.000 VNƒê\n\n"
            f"&#x25CF; B·∫Øt ƒë·∫ßu c∆∞·ª£c th·ªùi gian [<b>90s</b>]\n"
            f"üòò <b>M·ªùi c√°c ƒë·∫°i gia ra tay c∆∞·ª£c m·∫°nh nh√©!</b>",
            parse_mode='HTML' # R√µ r√†ng ch·ªâ ƒë·ªãnh parse_mode
        )
    except ApiException as e:
        print(f"L·ªói g·ª≠i tin nh·∫Øn b·∫Øt ƒë·∫ßu game: {e}")
        return # Tho√°t n·∫øu kh√¥ng g·ª≠i ƒë∆∞·ª£c tin nh·∫Øn

    # Th·ªùi gian ch·ªù v√† c·∫≠p nh·∫≠t t·ªïng c∆∞·ª£c
    time.sleep(30) # 60s c√≤n l·∫°i
    update_bet_summary("60s")

    time.sleep(30) # 30s c√≤n l·∫°i
    update_bet_summary("30s")

    time.sleep(20) # 10s c√≤n l·∫°i
    update_bet_summary("10s")

    time.sleep(10) # H·∫øt th·ªùi gian c∆∞·ª£c
    update_bet_summary("H·∫øt gi·ªù", final=True)

    turn_off_group_chat() # T·∫Øt nh·∫≠n c∆∞·ª£c
    accepting_bets = False
    time.sleep(3) # ƒê·ª£i m·ªôt ch√∫t tr∆∞·ªõc khi tung x√∫c x·∫Øc

    try:
        bot2.send_message(
            GAME_ROOM_ID,
            f"<b>B·∫Øt ƒë·∫ßu tung x√∫c x·∫Øc phi√™n #{current_session}</b>", parse_mode='HTML')
        time.sleep(2)

        dice_results = []
        for _ in range(3):
            dice_value = send_dice_room_reply(GAME_ROOM_ID)
            if dice_value is None:
                print("Kh√¥ng th·ªÉ l·∫•y gi√° tr·ªã x√∫c x·∫Øc. B·ªè qua phi√™n n√†y.")
                # G·ª≠i th√¥ng b√°o l·ªói n·∫øu kh√¥ng tung ƒë∆∞·ª£c x√∫c x·∫Øc
                bot2.send_message(GAME_ROOM_ID, "‚ö†Ô∏è L·ªói h·ªá th·ªëng, kh√¥ng th·ªÉ tung x√∫c x·∫Øc. Phi√™n n√†y b·ªã h·ªßy.")
                return 
            dice_results.append(dice_value)
            time.sleep(1) # ƒê·ª£i m·ªôt ch√∫t gi·ªØa m·ªói l·∫ßn tung

        dice_sum = sum(dice_results)
        game_result_type = check_result(dice_sum)
        game_result_text = check_result_text(dice_sum)

        session_results.append(game_result_type)
        if len(session_results) > 10:
            session_results.pop(0) # Gi·ªØ l·∫°i 10 phi√™n g·∫ßn nh·∫•t

        save_session_history_to_file()

        total_bet_T = sum([b['T'] for b in user_bets.values() if 'T' in b]) # ƒê·∫£m b·∫£o ki·ªÉm tra key
        total_bet_X = sum([b['X'] for b in user_bets.values() if 'X' in b]) # ƒê·∫£m b·∫£o ki·ªÉm tra key
        
        # G·ª¨I K·∫æT QU·∫¢ RI√äNG CHO ADMIN TR∆Ø·ªöC KHI C√îNG KHAI
        admin_private_message = (
            f"üé≤ <b>K·∫æT QU·∫¢ RI√äNG CHO ADMIN</b> üé≤\n"
            f"Phi√™n #{current_session}\n"
            f"X√∫c x·∫Øc: {dice_results} (T·ªïng: {dice_sum})\n"
            f"K·∫øt qu·∫£: <b>{game_result_text}</b>\n"
            f"Lo·∫°i: {'üîµ T√†i' if game_result_type == 'T' else 'üî¥ X·ªâu'}\n"
            f"----------------------------------------\n"
            f"T·ªïng c∆∞·ª£c T√†i: {int(total_bet_T):,} VNƒê\n"
            f"T·ªïng c∆∞·ª£c X·ªâu: {int(total_bet_X):,} VNƒê\n"
        )
        bot.send_message(ADMIN_ID, admin_private_message, parse_mode='HTML')
        time.sleep(2) # ƒê·ª£i m·ªôt ch√∫t tr∆∞·ªõc khi c√¥ng khai

        send_game_result_and_process_winnings(dice_results, dice_sum, game_result_type)

    except Exception as e:
        print(f"L·ªói trong qu√° tr√¨nh ch·∫°y game: {e}")
        traceback.print_exc()

def update_bet_summary(time_label, final=False):
    """C·∫≠p nh·∫≠t v√† g·ª≠i t·ªïng c∆∞·ª£c hi·ªán t·∫°i"""
    total_bet_T = sum([user_bets[user_id]['T'] for user_id in user_bets if 'T' in user_bets[user_id]])
    total_bet_X = sum([user_bets[user_id]['X'] for user_id in user_bets if 'X' in user_bets[user_id]])
    total_bet_TAI_users = sum([1 for user_id in user_bets if user_bets[user_id]['T'] > 0])
    total_bet_XIU_users = sum([1 for user_id in user_bets if user_bets[user_id]['X'] > 0])

    time_status_str = f"‚è∞ C√≤n {time_label} ƒë·ªÉ c∆∞·ª£c phi√™n #{current_session}" if not final else f"‚è∞ H·∫øt th·ªùi gian phi√™n #{current_session}"

    try:
        bot2.send_message(
            GAME_ROOM_ID,
            (
                f"<b>{time_status_str}</b>\n"
                f"<blockquote>T·ªïng C∆∞·ª£c üîµ | T·ªïng C∆∞·ª£c üî¥</blockquote>\n"
                f"üîµ <b>T√ÄI</b>: <code>{int(total_bet_T):,}</code>\n"
                f"\n"
                f"üî¥ <b>X·ªàU</b>: <code>{int(total_bet_X):,}</code>\n\n"
                f"<blockquote>S·ªë Ng∆∞·ªùi C∆∞·ª£c T√ÄI -- X·ªàU</blockquote>\n"
                f"üëÅ‚Äçüó® <b>T√ÄI</b>: <code>{int(total_bet_TAI_users):,}</code> Ng∆∞·ªùi c∆∞·ª£c.\n"
                f"\n"
                f"üëÅ‚Äçüó® <b>X·ªàU</b>: <code>{int(total_bet_XIU_users):,}</code> Ng∆∞·ªùi c∆∞·ª£c.\n\n"
            ),
            parse_mode='HTML'
        )
    except ApiException as e:
        print(f"L·ªói g·ª≠i tin nh·∫Øn t·ªïng c∆∞·ª£c: {e}")

def send_game_result_and_process_winnings(dice_results, dice_sum, game_result_type):
    """G·ª≠i k·∫øt qu·∫£ game v√† x·ª≠ l√Ω ti·ªÅn th·∫Øng/thua"""
    global current_session, user_balance, user_bets, processed_users
    
    last_10_sessions = session_results[-10:]
    display_last_10 = " ".join(
        ["üîµ" if session == 'T' else "üî¥" for session in last_10_sessions])
    last_1_session_display = "üîµ" if game_result_type == 'T' else "üî¥"
    game_result_text = check_result_text(dice_sum)

    total_winnings = 0
    total_losses = 0
    user_winnings_dict = {}

    users_who_bet = list(user_bets.keys()) # L·∫•y danh s√°ch ng∆∞·ªùi d√πng ƒë√£ c∆∞·ª£c trong phi√™n
    
    # X·ª≠ l√Ω th·∫Øng/thua cho t·ª´ng ng∆∞·ªùi ch∆°i
    for user_id in users_who_bet:
        if user_id not in processed_users: # ƒê·∫£m b·∫£o ch·ªâ x·ª≠ l√Ω m·ªôt l·∫ßn
            user_win_amount = calculate_user_winnings(user_id, game_result_type)
            user_lose_amount = calculate_user_losses(user_id, game_result_type)
            
            total_winnings += user_win_amount
            total_losses += user_lose_amount
            processed_users.add(user_id) # ƒê√°nh d·∫•u ƒë√£ x·ª≠ l√Ω
            
            if user_win_amount > 0:
                user_winnings_dict[user_id] = user_win_amount
            
            # G·ª≠i th√¥ng b√°o ri√™ng cho t·ª´ng ng∆∞·ªùi ch∆°i
            balance = user_balance.get(user_id, 0)
            message_text = ""
            if user_win_amount > 0:
                message_text = (
                    f"üîπÔ∏è Phi√™n XX#{current_session} B·∫°n ƒê√£ Th·∫Øng\n"
                    f"S·ªë ti·ªÅn th·∫Øng: <b>{int(user_win_amount):,}</b>\n"
                    f"S·ªë d∆∞ m·ªõi: <b>{int(balance):,}</b>"
                )
            elif user_lose_amount > 0:
                message_text = (
                    f"üîπÔ∏è Phi√™n XX#{current_session} B·∫°n ƒê√£ Thua\n"
                    f"S·ªë ti·ªÅn thua: <b>{int(user_lose_amount):,}</b>\n"
                    f"S·ªë d∆∞ m·ªõi: <b>{int(balance):,}</b>"
                )
            else: # Kh√¥ng th·∫Øng kh√¥ng thua (v√≠ d·ª• kh√¥ng c∆∞·ª£c)
                continue 

            try:
                bot.send_message(chat_id=user_id, text=message_text, parse_mode='HTML')
            except ApiException as e:
                print(f"Kh√¥ng th·ªÉ g·ª≠i tin nh·∫Øn k·∫øt qu·∫£ ri√™ng cho ng∆∞·ªùi d√πng {user_id}: {e}")
            except Exception as e:
                print(f"L·ªói kh√¥ng x√°c ƒë·ªãnh khi g·ª≠i tin nh·∫Øn k·∫øt qu·∫£ cho {user_id}: {e}")

    save_balance_to_file() # L∆∞u l·∫°i s·ªë d∆∞ sau khi c·∫≠p nh·∫≠t t·∫•t c·∫£

    sorted_user_winnings = sorted(user_winnings_dict.items(), key=lambda x: x[1], reverse=True)

    leaderboard_message = ""
    if sorted_user_winnings:
        leaderboard_message = "\n".join([
            f"&#x2503;{i+1} - <code>{str(uid)[-4:]}</code> - <code>{int(winnings):,}</code>"
            for i, (uid, winnings) in enumerate(sorted_user_winnings[:10])
        ])
    else:
        leaderboard_message = "&#x2503; Kh√¥ng c√≥ ng∆∞·ªùi th·∫Øng trong phi√™n n√†y."

    time.sleep(4)
    keyboard = types.InlineKeyboardMarkup()
    url_button = types.InlineKeyboardButton(text="K·∫øt Qu·∫£ TX [ Room ]", url="https://t.me/kqtxroomluxury") 
    keyboard.add(url_button)
    
    result_message_to_group = (
        f"<b>üå∏ K·∫øt Qu·∫£ X√∫c X·∫Øc Phi√™n #{current_session}</b>\n"
        f"&#x250F;&#x2501;&#x2501;&#x2501;&#x2501;&#x2501;&#x2501;&#x2501;&#x2501;&#x2501;&#x2501;&#x2501;&#x2501;&#x2501;&#x2501;&#x2501;&#x2501;&#x2501;&#x2501;&#x2501;&#x2501;&#x2501;&#x2501;&#x2501;&#x2501;&#x2501;&#x2501;&#x2501;&#x2501;&#x2501;&#x2501;&#x2501;&#x2501;&#x2513;\n"
        f"&#x2503;  {escape_html(' '.join(map(str, dice_results)))}  ({dice_sum})  {game_result_text} {last_1_session_display}\n"
        f"&#x2503;\n"
        f"&#x2503; &#x1F50E; T·ªïng Th·∫Øng: <code>{int(total_winnings):,}</code>\n"
        f"&#x2503;\n"
        f"&#x2503; &#x1F50E; T·ªïng Thua: <code>{int(total_losses):,}</code>\n"
        f"&#x2503;&#x2501;&#x2501;&#x2501;&#x2501;&#x2501;&#x2501;&#x2501;&#x2501;&#x2501;&#x2501;&#x2501;&#x2501;&#x2501;&#x2501;&#x2501;&#x2501;&#x2501;&#x2501;&#x2501;&#x2501;&#x2501;&#x2501;&#x2501;&#x2501;\n"
        f"&#x2503; &#x1F3C6; Top B·∫£ng X·∫øp H·∫°ng #{current_session}\n"
        f"&#x2503; TOP - ID - T·ªïng th·∫Øng\n"
        f"{leaderboard_message}\n"
        f"&#x2517;&#x2501;&#x2501;&#x2501;&#x2501;&#x2501;&#x2501;&#x2501;&#x2501;&#x2501;&#x2501;&#x2501;&#x2501;&#x2501;&#x2501;&#x2501;&#x2501;&#x2501;&#x2501;&#x2501;&#x2501;&#x2501;&#x2501;&#x2501;&#x2501;&#x2501;&#x2501;&#x2501;&#x2501;&#x2501;&#x2501;&#x2501;&#x2501;&#x251B;\n"
        f"L·ªãch S·ª≠ Phi√™n G·∫ßn Nh·∫•t\n\n"
        f"{display_last_10}\n\n"
        f"      üîµ  T√†i       |      üî¥   X·ªàU\n"
    )

    try:
        bot2.send_message(
            GAME_ROOM_ID,
            result_message_to_group,
            parse_mode='HTML',
            reply_markup=keyboard
        )
    except ApiException as e:
        print(f"L·ªói g·ª≠i tin nh·∫Øn k·∫øt qu·∫£ ƒë·∫øn nh√≥m game {GAME_ROOM_ID}: {e}")

    # G·ª≠i k·∫øt qu·∫£ c√¥ng khai ra nh√≥m k·∫øt qu·∫£ n·∫øu c√≥
    if RESULT_CHANNEL_ID and RESULT_CHANNEL_ID != GAME_ROOM_ID:
        try:
            bot3.send_message(RESULT_CHANNEL_ID, result_message_to_group, parse_mode='HTML', reply_markup=keyboard)
        except ApiException as e:
            print(f"L·ªói g·ª≠i tin nh·∫Øn k·∫øt qu·∫£ ƒë·∫øn k√™nh k·∫øt qu·∫£ {RESULT_CHANNEL_ID}: {e}")

    time.sleep(3)

def game_timer():
    """Lu·ªìng ch·∫°y game T√†i X·ªâu t·ª± ƒë·ªông"""
    while True:
        try:
            start_game()
        except Exception as e:
            print(f"L·ªói x·∫£y ra trong lu·ªìng game_timer: {e}")
            traceback.print_exc()
        time.sleep(5) # Kho·∫£ng th·ªùi gian ch·ªù gi·ªØa c√°c phi√™n

# =====================--------------(L·ªánh Admin)--------------=====================

@bot.message_handler(commands=['congtien'])
def congtien(message):
    """L·ªánh admin ƒë·ªÉ c·ªông ti·ªÅn cho ng∆∞·ªùi ch∆°i"""
    if message.from_user.id != ADMIN_ID:
        bot.reply_to(message, "‚ö†Ô∏è B·∫°n kh√¥ng c√≥ quy·ªÅn th·ª±c hi·ªán thao t√°c n√†y.")
        return

    try:
        command_parts = message.text.split()
        if len(command_parts) != 3:
            bot.reply_to(message, "‚ö†Ô∏è C√∫ ph√°p kh√¥ng h·ª£p l·ªá. Vui l√≤ng nh·∫≠p ƒë√∫ng: <code>/congtien [ID ng∆∞·ªùi ch∆°i] [s·ªë ti·ªÅn]</code>", parse_mode='HTML')
            return

        target_user_id = int(command_parts[1])
        amount = int(command_parts[2])

        if amount <= 0:
            bot.reply_to(message, "‚ö†Ô∏è S·ªë ti·ªÅn c·ªông ph·∫£i l·ªõn h∆°n 0.")
            return

        load_balance_from_file() # T·∫£i s·ªë d∆∞ m·ªõi nh·∫•t

        if target_user_id not in user_balance:
            user_balance[target_user_id] = 0
        user_balance[target_user_id] += amount

        save_balance_to_file() # L∆∞u s·ªë d∆∞ ƒë√£ c·∫≠p nh·∫≠t

        bot.reply_to(message, f"‚úÖ ƒê√£ c·ªông th√†nh c√¥ng <b>{amount:,} VNƒê</b> v√†o t√†i kho·∫£n c·ªßa ID <b>{target_user_id}</b>.", parse_mode='HTML')
        
        new_balance = user_balance[target_user_id]
        try:
            bot.send_message(
                target_user_id, 
                f"üéâ <b>B·∫°n v·ª´a ƒë∆∞·ª£c c·ªông {amount:,} VNƒê v√†o t√†i kho·∫£n.</b>\n"
                f"S·ªë d∆∞ hi·ªán t·∫°i c·ªßa b·∫°n: <b>{new_balance:,} VNƒê</b>", 
                parse_mode='HTML'
            )
        except ApiException as e:
            print(f"Kh√¥ng th·ªÉ g·ª≠i tin nh·∫Øn cho ng∆∞·ªùi d√πng {target_user_id} (c√≥ th·ªÉ do ng∆∞·ªùi d√πng ch·∫∑n bot): {e}")
            bot.reply_to(message, f"‚ö†Ô∏è ƒê√£ c·ªông ti·ªÅn nh∆∞ng kh√¥ng th·ªÉ g·ª≠i th√¥ng b√°o cho ng∆∞·ªùi d√πng {target_user_id} (c√≥ th·ªÉ do ng∆∞·ªùi d√πng ch·∫∑n bot).")
        except Exception as e:
            print(f"L·ªói kh√¥ng x√°c ƒë·ªãnh khi g·ª≠i tin nh·∫Øn cho ng∆∞·ªùi d√πng {target_user_id}: {e}")
            bot.reply_to(message, f"‚ö†Ô∏è ƒê√£ c·ªông ti·ªÅn nh∆∞ng g·∫∑p l·ªói khi g·ª≠i th√¥ng b√°o cho ng∆∞·ªùi d√πng {target_user_id}.")


    except ValueError:
        bot.reply_to(message, "‚ö†Ô∏è S·ªë ID ng∆∞·ªùi ch∆°i ho·∫∑c s·ªë ti·ªÅn kh√¥ng h·ª£p l·ªá. Vui l√≤ng nh·∫≠p s·ªë nguy√™n.")
    except Exception as e:
        bot.reply_to(message, f"‚ö†Ô∏è ƒê√£ x·∫£y ra l·ªói: {str(e)}")
        traceback.print_exc()

# =====================--------------(X·ª≠ l√Ω tin nh·∫Øn trong nh√≥m game)--------------=====================

@bot2.message_handler(func=lambda message: True)
def handle_message_in_gameroom(message):
    """X·ª≠ l√Ω tin nh·∫Øn trong nh√≥m game (ch·ªß y·∫øu l√† ƒë·∫∑t c∆∞·ª£c)"""
    # Ch·ªâ x·ª≠ l√Ω tin nh·∫Øn trong nh√≥m game ƒë√£ ƒë·ªãnh c·∫•u h√¨nh
    if message.chat.id != GAME_ROOM_ID:
        return

    # Lu√¥n c·ªë g·∫Øng x√≥a tin nh·∫Øn kh√¥ng ph·∫£i l·ªánh c∆∞·ª£c ngay l·∫≠p t·ª©c
    if not accepting_bets:
        try:
            bot2.delete_message(message.chat.id, message.message_id)
            time.sleep(0.05) # ƒê·ªô tr·ªÖ nh·ªè
            return # D·ª´ng x·ª≠ l√Ω n·∫øu kh√¥ng ch·∫•p nh·∫≠n c∆∞·ª£c
        except ApiException as e:
            if "message to delete not found" in str(e): # Tin nh·∫Øn ƒë√£ b·ªã x√≥a
                pass
            else:
                print(f"L·ªói khi x√≥a tin nh·∫Øn khi h·∫øt th·ªùi gian c∆∞·ª£c: {e}")
        except Exception as e:
            print(f"L·ªói kh√¥ng x√°c ƒë·ªãnh khi x√≥a tin nh·∫Øn: {e}")
        return 

    # N·∫øu ƒëang ch·∫•p nh·∫≠n c∆∞·ª£c
    if message.text:
        command_parts = message.text.split()
        if len(command_parts) == 2:
            bet_type = command_parts[0].upper()
            bet_amount_str = command_parts[1]

            if bet_type in ['T', 'X']:
                user_id = message.from_user.id
                
                load_balance_from_file() # T·∫£i s·ªë d∆∞ m·ªõi nh·∫•t

                try:
                    if bet_amount_str.upper() == 'MAX':
                        max_possible_bet = min(user_balance.get(user_id, 0), 300000)
                        if max_possible_bet >= 3000:
                            bet_amount = max_possible_bet
                        else:
                            bot2.send_message(GAME_ROOM_ID, "‚ùå S·ªë d∆∞ c·ªßa b·∫°n kh√¥ng ƒë·ªß ƒë·ªÉ c∆∞·ª£c t·ªëi thi·ªÉu (3.000 VNƒê).", reply_to_message_id=message.message_id)
                            return
                    else:
                        bet_amount = int(bet_amount_str)

                    if 3000 <= bet_amount <= 300000:
                        confirm_bet(user_id, bet_type, bet_amount, message.message_id, is_anonymous=False)
                    else:
                        bot2.send_message(GAME_ROOM_ID, "‚ùå S·ªë ti·ªÅn c∆∞·ª£c ph·∫£i t·ª´ 3.000 ƒë·∫øn 300.000.", reply_to_message_id=message.message_id)
                except ValueError:
                    bot2.send_message(GAME_ROOM_ID, "‚ùå S·ªë ti·ªÅn c∆∞·ª£c kh√¥ng h·ª£p l·ªá.", reply_to_message_id=message.message_id)
                except ApiException as e:
                    print(f"L·ªói API Telegram khi x·ª≠ l√Ω c∆∞·ª£c: {e}")
                except Exception as e:
                    print(f"L·ªói kh√¥ng x√°c ƒë·ªãnh khi x·ª≠ l√Ω c∆∞·ª£c: {e}")
            else: # Tin nh·∫Øn c√≥ 2 ph·∫ßn nh∆∞ng kh√¥ng ph·∫£i T/X
                try:
                    bot2.delete_message(message.chat.id, message.message_id)
                    time.sleep(0.05)
                except ApiException as e:
                    if "message to delete not found" in str(e): pass
                    else: print(f"L·ªói khi x√≥a tin nh·∫Øn kh√¥ng h·ª£p l·ªá (format): {e}")
        else: # Tin nh·∫Øn kh√¥ng c√≥ 2 ph·∫ßn
            try:
                bot2.delete_message(message.chat.id, message.message_id)
                time.sleep(0.05)
            except ApiException as e:
                if "message to delete not found" in str(e): pass
                else: print(f"L·ªói khi x√≥a tin nh·∫Øn kh√¥ng h·ª£p l·ªá (s·ªë t·ª´): {e}")
    else: # Tin nh·∫Øn kh√¥ng c√≥ text (v√≠ d·ª•: ·∫£nh, sticker)
        try:
            bot2.delete_message(message.chat.id, message.message_id)
            time.sleep(0.05)
        except ApiException as e:
            if "message to delete not found" in str(e): pass
            else: print(f"L·ªói khi x√≥a tin nh·∫Øn kh√¥ng h·ª£p l·ªá (kh√¥ng text): {e}")


# =====================--------------(Ki·ªÉm tra file)--------------=====================
def check_file():
    """Ki·ªÉm tra s·ª± t·ªìn t·∫°i v√† n·ªôi dung c·ªßa file thanhtran309.txt"""
    try:
        if not os.path.exists("thanhtran309.txt"):
            print("L·ªói: 'thanhtran309.txt' kh√¥ng t√¨m th·∫•y. Bot s·∫Ω kh√¥ng ch·∫°y.")
            return False
        
        with open("thanhtran309.txt", "r") as file:
            content = file.read()
            if "TRANTIENTHANH" not in content:
                print("L·ªói: 'thanhtran309.txt' thi·∫øu chu·ªói 'TRANTIENTHANH'. Bot s·∫Ω kh√¥ng ch·∫°y.")
                return False
    except Exception as e:
        print(f"L·ªói khi ki·ªÉm tra file 'thanhtran309.txt': {e}. Bot s·∫Ω kh√¥ng ch·∫°y.")
        return False
    return True   

# =====================--------------(Kh·ªüi ch·∫°y Bot)--------------=====================
def poll_bot(bot_instance):
    """H√†m ƒë·ªÉ ch·∫°y polling cho t·ª´ng bot trong m·ªôt lu·ªìng ri√™ng"""
    while True: # V√≤ng l·∫∑p v√¥ h·∫°n ƒë·ªÉ t·ª± ƒë·ªông kh·ªüi ƒë·ªông l·∫°i polling khi c√≥ l·ªói
        try:
            bot_info = bot_instance.get_me()
            print(f"ƒêang kh·ªüi ƒë·ªông bot: @{bot_info.username}")
            bot_instance.polling(none_stop=True, interval=0, timeout=30)
        except ApiException as e:
            # X·ª≠ l√Ω c√°c l·ªói API c·ª• th·ªÉ
            if e.result_json and e.result_json.get('error_code') == 401:
                print(f"L·ªói Unauthorized (401) cho bot @{bot_info.username}. Vui l√≤ng ki·ªÉm tra l·∫°i token!")
            else:
                print(f"L·ªói API khi polling bot @{bot_info.username}: {e}. Th·ª≠ l·∫°i sau 5 gi√¢y...")
            traceback.print_exc() # In ƒë·∫ßy ƒë·ªß l·ªói ƒë·ªÉ d·ªÖ debug
            time.sleep(5) 
        except Exception as e:
            print(f"L·ªói kh√¥ng x√°c ƒë·ªãnh khi polling bot @{bot_info.username}: {e}. Th·ª≠ l·∫°i sau 5 gi√¢y...")
            traceback.print_exc()
            time.sleep(5) 

if check_file():
    # Kh·ªüi t·∫°o v√† ch·∫°y c√°c lu·ªìng cho t·ª´ng bot
    # ƒê·∫£m b·∫£o m·ªói bot ƒë∆∞·ª£c polling tr√™n m·ªôt lu·ªìng ri√™ng
    threading.Thread(target=poll_bot, args=(bot,)).start()
    threading.Thread(target=poll_bot, args=(bot2,)).start()
    threading.Thread(target=poll_bot, args=(bot3,)).start()

    # Kh·ªüi ch·∫°y lu·ªìng game timer
    timer_thread = threading.Thread(target=game_timer)
    timer_thread.daemon = True # ƒê·∫∑t daemon True ƒë·ªÉ lu·ªìng n√†y t·ª± k·∫øt th√∫c khi ch∆∞∆°ng tr√¨nh ch√≠nh k·∫øt th√∫c
    timer_thread.start()
    print("Bot ƒë√£ kh·ªüi ƒë·ªông v√† ƒëang ch·∫°y...")
else:
    print("Bot kh√¥ng th·ªÉ kh·ªüi ƒë·ªông do l·ªói ki·ªÉm tra file.")

