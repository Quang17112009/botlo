import logging
from telegram import Update, ForceReply
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
import random
import hashlib
import asyncio

# --- C·∫•u h√¨nh Logging ---
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO
)
logger = logging.getLogger(__name__)

# --- C·∫•u h√¨nh Bot ---
TELEGRAM_BOT_TOKEN = "7757369765:AAGNKUk80xeBAPXXZRTXySjQ0DPZXjzsueU"  # <-- Thay th·∫ø b·∫±ng Token Bot c·ªßa b·∫°n
ADMIN_IDS = [6915752059]  # <-- Thay th·∫ø b·∫±ng ID Telegram c·ªßa admin, v√≠ d·ª•: [123456789]

# --- Bi·∫øn to√†n c·ª•c (d·ªØ li·ªáu s·∫Ω m·∫•t khi bot kh·ªüi ƒë·ªông l·∫°i) ---
users_data = {}  # {user_id: {'balance': 10000000, 'username': 'Nguyen Van A'}}
current_bets = {}  # {user_id: {'type': 'tai/xiu', 'amount': 10000}}
current_session_id = 1748325
session_is_active = False # Tr·∫°ng th√°i phi√™n, ch·ªâ cho ph√©p c∆∞·ª£c khi True
last_dice_roll_info = {} # L∆∞u th√¥ng tin k·∫øt qu·∫£ phi√™n cu·ªëi c√πng

# --- H√†m ti·ªán √≠ch ---
def is_admin(user_id):
    """Ki·ªÉm tra xem ng∆∞·ªùi d√πng c√≥ ph·∫£i admin kh√¥ng."""
    return user_id in ADMIN_IDS

def generate_dice_roll():
    """T·∫°o 3 vi√™n x√∫c x·∫Øc ng·∫´u nhi√™n."""
    return [random.randint(1, 6) for _ in range(3)]

def calculate_result(dice_roll):
    """T√≠nh t·ªïng v√† x√°c ƒë·ªãnh T√†i/X·ªâu."""
    total = sum(dice_roll)
    if 3 <= total <= 10:
        return "X·ªàU", total
    elif 11 <= total <= 18:
        return "T√ÄI", total
    else:
        return "L·ªñI", total # Tr∆∞·ªùng h·ª£p kh√¥ng mong mu·ªën

def generate_md5(session_id, random_string, dice_values):
    """T·∫°o MD5 minh b·∫°ch t·ª´ chu·ªói x√°c minh."""
    combined_string = f"#{session_id} {random_string} {'-'.join(map(str, dice_values))}"
    return hashlib.md5(combined_string.encode('utf-8')).hexdigest()

def get_current_pattern():
    """T·∫°o c·∫ßu hi·ªán t·∫°i (v√≠ d·ª• tƒ©nh, c·∫ßn DB ƒë·ªÉ l√†m ƒë·ªông)."""
    return "‚ö´Ô∏è‚ö´Ô∏è‚ö™Ô∏è‚ö™Ô∏è‚ö™Ô∏è‚ö™Ô∏è‚ö´Ô∏è‚ö´Ô∏è‚ö´Ô∏è‚ö´Ô∏è" # ƒê√¢y ch·ªâ l√† v√≠ d·ª• tƒ©nh

# --- L·ªánh Kh·ªüi ƒë·ªông Bot ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user
    if user.id not in users_data:
        users_data[user.id] = {'balance': 10000000, 'username': user.first_name} # Kh·ªüi t·∫°o 10 tri·ªáu VNƒê
    
    # Ch·ªâ g·ª≠i tin nh·∫Øn ch√†o m·ª´ng
    await update.message.reply_html(
        rf"Ch√†o m·ª´ng {user.mention_html()}! T√¥i l√† bot c∆∞·ª£c T√†i X·ªâu. H√£y d√πng t√¥i trong m·ªôt nh√≥m nh√©, ho·∫∑c ki·ªÉm tra s·ªë d∆∞ v·ªõi /balance.",
    )

# --- L·ªánh Ki·ªÉm tra S·ªë d∆∞ ---
async def balance(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.effective_user.id
    if user_id not in users_data:
        users_data[user_id] = {'balance': 10000000, 'username': update.effective_user.first_name}
    
    await update.message.reply_text(f"üí∞ S·ªë d∆∞ hi·ªán t·∫°i c·ªßa b·∫°n: {users_data[user_id]['balance']:,} VNƒê")

# --- L·ªánh ƒê·∫∑t c∆∞·ª£c (/tai, /xiu) ---
async def place_bet(update: Update, context: ContextTypes.DEFAULT_TYPE, bet_type: str) -> None:
    if update.effective_chat.type == "private":
        await update.message.reply_text("L·ªánh n√†y ch·ªâ c√≥ th·ªÉ s·ª≠ d·ª•ng trong nh√≥m chat.")
        return

    global session_is_active
    if not session_is_active:
        await update.message.reply_text("Hi·ªán kh√¥ng ph·∫£i th·ªùi gian ƒë·∫∑t c∆∞·ª£c. Vui l√≤ng ch·ªù phi√™n m·ªõi b·∫Øt ƒë·∫ßu.")
        return

    args = context.args
    if not args:
        await update.message.reply_text(
            f"‚ö†Ô∏è C√∫ ph√°p sai!\nD√πng /{bet_type} [s·ªë ti·ªÅn/all]\nV√≠ d·ª•: /{bet_type} all ho·∫∑c /{bet_type} 5000"
        )
        return

    user_id = update.effective_user.id
    username = update.effective_user.first_name

    if user_id not in users_data:
        users_data[user_id] = {'balance': 10000000, 'username': username} # Kh·ªüi t·∫°o n·∫øu ch∆∞a c√≥
    
    bet_amount_str = args[0]
    try:
        if bet_amount_str.lower() == 'all':
            bet_amount = users_data[user_id]['balance']
        else:
            bet_amount = int(bet_amount_str)
        
        if bet_amount <= 0:
            await update.message.reply_text("S·ªë ti·ªÅn c∆∞·ª£c ph·∫£i l·ªõn h∆°n 0.")
            return

        if bet_amount > users_data[user_id]['balance']:
            await update.message.reply_text(f"B·∫°n kh√¥ng ƒë·ªß s·ªë d∆∞. S·ªë d∆∞ hi·ªán t·∫°i: {users_data[user_id]['balance']:,} VNƒê")
            return
        
        # L∆∞u c∆∞·ª£c c·ªßa ng∆∞·ªùi d√πng cho phi√™n hi·ªán t·∫°i
        current_bets[user_id] = {'type': bet_type, 'amount': bet_amount, 'username': username}
        users_data[user_id]['balance'] -= bet_amount # Tr·ª´ ti·ªÅn ngay khi ƒë·∫∑t c∆∞·ª£c

        await update.message.reply_text(
            f"üîµ ƒê√É C∆Ø·ª¢C TH√ÄNH C√îNG üîµ\n"
            f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
            f"üî¢ S·ªë ti·ªÅn: {bet_amount:,} VNƒê\n"
            f"üéØ C∆∞·ª£c v√†o: {bet_type.upper()}\n"
            f"üí∞ S·ªë d∆∞ c√≤n l·∫°i: {users_data[user_id]['balance']:,} VNƒê\n\n"
            f"üìä C·∫ßu hi·ªán t·∫°i: {get_current_pattern()}"
        )

    except ValueError:
        await update.message.reply_text("S·ªë ti·ªÅn kh√¥ng h·ª£p l·ªá. Vui l√≤ng nh·∫≠p s·ªë ho·∫∑c 'all'.")

async def cmd_tai(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await place_bet(update, context, "T√ÄI")

async def cmd_xiu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await place_bet(update, context, "X·ªàU")

# --- L·ªánh ADMIN: B·∫Øt ƒë·∫ßu phi√™n m·ªõi (ch·ªâ trong nh√≥m) ---
async def admin_start_session(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if not is_admin(update.effective_user.id):
        await update.message.reply_text("B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng l·ªánh n√†y.")
        return
    
    if update.effective_chat.type == "private":
        await update.message.reply_text("L·ªánh n√†y ch·ªâ d√πng trong nh√≥m.")
        return
    
    global session_is_active, current_session_id, current_bets
    if session_is_active:
        await update.message.reply_text(f"Phi√™n #{current_session_id} ƒëang ho·∫°t ƒë·ªông. Vui l√≤ng k·∫øt th√∫c phi√™n tr∆∞·ªõc.")
        return

    current_session_id += 1
    session_is_active = True
    current_bets = {} # Reset c∆∞·ª£c cho phi√™n m·ªõi

    await update.message.reply_text(
        f"üé∞ PHI√äN #{current_session_id} B·∫ÆT ƒê·∫¶U üé∞\n"
        f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
        f"üìä C·∫ßu hi·ªán t·∫°i: {get_current_pattern()}\n"
        f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
        f"‚è≥ Th·ªùi gian ƒë·∫∑t c∆∞·ª£c: 30 gi√¢y\n"
        f"üí∞ L·ªánh c∆∞·ª£c:\n"
        f"/tai [s·ªë ti·ªÅn/all] - C∆∞·ª£c T√†i (11-18)\n"
        f"/xiu [s·ªë ti·ªÅn/all] - C∆∞·ª£c X·ªâu (3-10)\n"
        f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
        f"üí° Ch·∫ø ƒë·ªô: MD5 Minh B·∫°ch\n"
        f"üé∞ Jackpot: {200000000000000000000000000000000000040013701100431380020:,} VNƒê" # Jackpot tƒ©nh cho v√≠ d·ª•
    )
    # H·∫πn gi·ªù t·ª± ƒë·ªông k·∫øt th√∫c phi√™n sau 30 gi√¢y (c√≥ th·ªÉ ƒëi·ªÅu ch·ªânh)
    context.job_queue.run_once(auto_end_session, 30, chat_id=update.effective_chat.id, name=f"end_session_{current_session_id}")


# --- L·ªánh ADMIN: K·∫øt th√∫c phi√™n v√† tr·∫£ k·∫øt qu·∫£ (ch·ªâ trong nh√≥m) ---
# H√†m n√†y c√≥ th·ªÉ ƒë∆∞·ª£c g·ªçi t·ª± ƒë·ªông ho·∫∑c b·∫±ng l·ªánh admin_end_session
async def end_session(update: Update, context: ContextTypes.DEFAULT_TYPE, dice_override=None) -> None:
    # `update` c√≥ th·ªÉ l√† None n·∫øu g·ªçi t·ª´ job_queue, n√™n c·∫ßn chat_id v√† message_id
    chat_id = context.job.chat_id if context.job else update.effective_chat.id
    
    global session_is_active, last_dice_roll_info
    if not session_is_active:
        if update: # Ch·ªâ tr·∫£ l·ªùi n·∫øu c√≥ update (g·ªçi th·ªß c√¥ng)
            await update.message.reply_text("Kh√¥ng c√≥ phi√™n n√†o ƒëang ho·∫°t ƒë·ªông ƒë·ªÉ k·∫øt th√∫c.")
        return
    
    session_is_active = False # K·∫øt th√∫c phi√™n
    
    dice_values = dice_override if dice_override else generate_dice_roll()
    result_type, total = calculate_result(dice_values)
    
    random_string = ''.join(random.choices('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789', k=10))
    md5_hash = generate_md5(current_session_id, random_string, dice_values)
    verification_code = f"#{current_session_id} {random_string} {'-'.join(map(str, dice_values))}"

    total_bet_amount = sum(bet['amount'] for bet in current_bets.values())
    total_win_amount = 0
    winners_list = []
    
    # X·ª≠ l√Ω th·∫Øng thua
    for user_id, bet_info in current_bets.items():
        if bet_info['type'].upper() == result_type:
            win_amount = bet_info['amount'] * 2 # Th·∫Øng g·∫•p ƒë√¥i ti·ªÅn c∆∞·ª£c
            users_data[user_id]['balance'] += win_amount
            total_win_amount += bet_info['amount'] # T·ªïng ti·ªÅn c∆∞·ª£c th·∫Øng
            winners_list.append(f"üèÜ {bet_info['username']} +{bet_info['amount']:,} VNƒê")
    
    # Hi·ªÉn th·ªã Jackpot khi n·ªï (v√≠ d·ª• 3 con 6 ho·∫∑c 3 con 1)
    jackpot_status = ""
    if dice_values == [6, 6, 6] or dice_values == [1, 1, 1]:
        jackpot_status = f"\nüéâ N·ªî JACKPOT! üéâ\nS·ªë ti·ªÅn Jackpot: {200000000000000000000000000000000000040013701100431380020:,} VNƒê"
        # C·∫ßn th√™m logic ƒë·ªÉ ch·ªçn ng∆∞·ªùi th·∫Øng Jackpot v√† ph√¢n ph·ªëi ti·ªÅn

    # L∆∞u th√¥ng tin phi√™n cu·ªëi c√πng ƒë·ªÉ admin bot ri√™ng c√≥ th·ªÉ truy c·∫≠p
    last_dice_roll_info = {
        'dice': dice_values,
        'result_type': result_type,
        'total': total,
        'md5': md5_hash,
        'verification_code': verification_code,
        'total_bet_amount': total_bet_amount,
        'total_win_amount': total_win_amount,
        'winners_list': winners_list,
        'jackpot_status': jackpot_status,
        'session_id': current_session_id
    }

    message_text = (
        f"üéØ PHI√äN #{current_session_id} K·∫æT TH√öC üéØ\n"
        f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
        f"üé≤ X√∫c x·∫Øc: {', '.join(map(str, dice_values))} = {total}\n"
        f"üîÆ K·∫øt qu·∫£: üé≤ {result_type}\n\n"
        f"üîê MD5 Minh b·∫°ch:\n{md5_hash}\n\n"
        f"üîé M√£ x√°c minh:\n{verification_code}\n\n"
        f"‚úÖ X√°c minh: M√£ h√≥a m√£ tr√™n b·∫±ng MD5 s·∫Ω ra k·∫øt qu·∫£ tr√πng kh·ªõp v·ªõi MD5 ƒë√£ c√¥ng b·ªë.\n\n"
        f"üìä T·ªïng c∆∞·ª£c: {total_bet_amount:,} VNƒê\n"
        f"üí∞ T·ªïng th∆∞·ªüng: {total_win_amount:,} VNƒê\n\n"
        f"üéâ Ng∆∞·ªùi th·∫Øng:\n" + "\n".join(winners_list) + jackpot_status +
        f"\n\nüìä C·∫ßu hi·ªán t·∫°i: {get_current_pattern()}"
    )
    
    await context.bot.send_message(chat_id=chat_id, text=message_text)

    # Sau khi k·∫øt th√∫c, clear c∆∞·ª£c cho phi√™n ti·∫øp theo
    global current_bets
    current_bets = {}

# H√†m ƒë∆∞·ª£c g·ªçi t·ª± ƒë·ªông b·ªüi job_queue
async def auto_end_session(context: ContextTypes.DEFAULT_TYPE):
    await end_session(None, context) # Truy·ªÅn None cho update v√¨ kh√¥ng c√≥ update t·ª´ ng∆∞·ªùi d√πng

# L·ªánh admin ƒë·ªÉ t·ª± k·∫øt th√∫c phi√™n th·ªß c√¥ng trong nh√≥m (thay v√¨ ƒë·ª£i h·∫πn gi·ªù)
async def admin_end_session_manual(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if not is_admin(update.effective_user.id):
        await update.message.reply_text("B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng l·ªánh n√†y.")
        return
    if update.effective_chat.type == "private":
        await update.message.reply_text("L·ªánh n√†y ch·ªâ d√πng trong nh√≥m.")
        return
    await end_session(update, context)

# --- L·ªánh ADMIN (TR√äN BOT RI√äNG): Can thi·ªáp k·∫øt qu·∫£ ---
async def admin_override_dice(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if not is_admin(update.effective_user.id) or update.effective_chat.type != "private":
        await update.message.reply_text("L·ªánh n√†y ch·ªâ d√†nh cho Admin v√† ch·ªâ s·ª≠ d·ª•ng trong chat ri√™ng v·ªõi bot.")
        return
    
    args = context.args
    if len(args) != 3:
        await update.message.reply_text("C√∫ ph√°p: /admintung [s·ªë_1] [s·ªë_2] [s·ªë_3] (v√≠ d·ª•: /admintung 6 6 6)")
        return
    
    try:
        dice_values = [int(arg) for arg in args]
        if not all(1 <= d <= 6 for d in dice_values):
            raise ValueError
        
        # ƒê·ªÉ can thi·ªáp, admin s·∫Ω tung x√∫c x·∫Øc v√† k·∫øt th√∫c phi√™n trong nh√≥m chat
        # C·∫ßn bi·∫øt chat_id c·ªßa nh√≥m m√† phi√™n ƒëang di·ªÖn ra
        # ƒê√¢y l√† v√≠ d·ª• ƒë∆°n gi·∫£n, b·∫°n c·∫ßn c∆° ch·∫ø ƒë·ªÉ bot bi·∫øt chat_id c·ªßa nh√≥m ƒëang ho·∫°t ƒë·ªông
        # VD: group_chat_id = -100xxxxxxxxxx
        # N·∫øu bot ch·ªâ ho·∫°t ƒë·ªông trong 1 nh√≥m duy nh·∫•t, c√≥ th·ªÉ hardcode chat_id ƒë√≥.
        # Ho·∫∑c admin c√≥ th·ªÉ g·ª≠i l·ªánh /adminphienmoi trong nh√≥m tr∆∞·ªõc ƒë·ªÉ bot l∆∞u chat_id.

        # Gi·∫£ ƒë·ªãnh bot bi·∫øt chat_id c·ªßa nh√≥m ƒëang ch∆°i
        # T·∫°m th·ªùi l·∫•y chat_id t·ª´ update n·∫øu admin g√µ l·ªánh n√†y trong 1 nh√≥m
        # N·∫øu admin g√µ trong private chat, b·∫°n c·∫ßn 1 c∆° ch·∫ø ƒë·ªÉ x√°c ƒë·ªãnh nh√≥m n√†o ƒëang ho·∫°t ƒë·ªông
        # V√≠ d·ª•: group_chat_id = some_group_chat_id_stored_previously
        
        # ƒê·ªÉ ƒë∆°n gi·∫£n, gi·∫£ s·ª≠ admin d√πng l·ªánh n√†y trong nh√≥m
        # N·∫øu admin d√πng trong chat ri√™ng, th√¨ s·∫Ω c·∫ßn m·ªôt bi·∫øn l∆∞u chat_id c·ªßa nh√≥m ƒëang ch∆°i
        # v√≠ d·ª•: active_group_chat_id = -100123456789 (l·∫•y t·ª´ update khi ng∆∞·ªùi d√πng g√µ /admin_start_session)
        # For now, let's just use the current chat if it's a group, else notify admin.
        if context.args and len(context.args) == 4: # admintung [chat_id] [d1] [d2] [d3]
             target_chat_id = int(context.args[0])
             dice_values = [int(arg) for arg in context.args[1:]]
        else: # admintung [d1] [d2] [d3]
            if update.effective_chat.type == "private":
                await update.message.reply_text("ƒê·ªÉ tung x√∫c x·∫Øc cho nh√≥m, b·∫°n c·∫ßn ch·ªâ ƒë·ªãnh chat_id c·ªßa nh√≥m. V√≠ d·ª•: /admintung -123456789 6 4 1")
                return
            target_chat_id = update.effective_chat.id

        # Ki·ªÉm tra n·∫øu phi√™n ƒëang ho·∫°t ƒë·ªông trong nh√≥m ƒë√≥
        if not session_is_active:
             await update.message.reply_text("Kh√¥ng c√≥ phi√™n n√†o ƒëang ho·∫°t ƒë·ªông trong nh√≥m.")
             return

        # T·∫°o m·ªôt context ·∫£o cho h√†m end_session
        dummy_context = ContextTypes.DEFAULT_TYPE(bot=context.bot, args=context.args, chat_data=context.chat_data, user_data=context.user_data)
        # Gi·∫£ l·∫≠p job cho end_session bi·∫øt chat_id
        dummy_context.job = type('Job', (object,), {'chat_id': target_chat_id, 'name': 'admin_manual_end_session'})()
        
        await end_session(None, dummy_context, dice_override=dice_values)
        await update.message.reply_text(f"ƒê√£ can thi·ªáp k·∫øt qu·∫£ phi√™n #{current_session_id} v·ªõi x√∫c x·∫Øc: {', '.join(map(str, dice_values))}")

    except ValueError:
        await update.message.reply_text("L·ªói: X√∫c x·∫Øc ph·∫£i l√† s·ªë t·ª´ 1 ƒë·∫øn 6. C√∫ ph√°p: /admintung [s·ªë_1] [s·ªë_2] [s·ªë_3]")


# --- L·ªánh ADMIN (TR√äN BOT RI√äNG): Xem th√¥ng tin phi√™n cu·ªëi c√πng ---
async def admin_last_session_info(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if not is_admin(update.effective_user.id) or update.effective_chat.type != "private":
        await update.message.reply_text("L·ªánh n√†y ch·ªâ d√†nh cho Admin v√† ch·ªâ s·ª≠ d·ª•ng trong chat ri√™ng v·ªõi bot.")
        return
    
    if not last_dice_roll_info:
        await update.message.reply_text("Ch∆∞a c√≥ th√¥ng tin v·ªÅ phi√™n cu·ªëi c√πng.")
        return

    info = last_dice_roll_info
    message_text = (
        f"--- TH√îNG TIN PHI√äN CU·ªêI C√ôNG #{info['session_id']} ---\n"
        f"üé≤ X√∫c x·∫Øc: {', '.join(map(str, info['dice']))} = {info['total']}\n"
        f"üîÆ K·∫øt qu·∫£: üé≤ {info['result_type']}\n"
        f"üîê MD5: {info['md5']}\n"
        f"üîé M√£ x√°c minh: {info['verification_code']}\n"
        f"üìä T·ªïng c∆∞·ª£c: {info['total_bet_amount']:,} VNƒê\n"
        f"üí∞ T·ªïng th∆∞·ªüng: {info['total_win_amount']:,} VNƒê\n"
        f"üéâ Ng∆∞·ªùi th·∫Øng:\n" + "\n".join(info['winners_list']) + info['jackpot_status']
    )
    await update.message.reply_text(message_text)

# --- L·ªánh ADMIN (TR√äN BOT RI√äNG): C·ªông ti·ªÅn cho user ---
async def admin_add_balance(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if not is_admin(update.effective_user.id) or update.effective_chat.type != "private":
        await update.message.reply_text("L·ªánh n√†y ch·ªâ d√†nh cho Admin v√† ch·ªâ s·ª≠ d·ª•ng trong chat ri√™ng v·ªõi bot.")
        return

    args = context.args
    if len(args) != 2:
        await update.message.reply_text("C√∫ ph√°p: /adminaddxu [user_id] [s·ªë ti·ªÅn]")
        return
    try:
        target_user_id = int(args[0])
        amount = int(args[1])
        if amount <= 0:
            await update.message.reply_text("S·ªë ti·ªÅn ph·∫£i l·ªõn h∆°n 0.")
            return

        if target_user_id not in users_data:
            # N·∫øu ng∆∞·ªùi d√πng ch∆∞a t·ª´ng t∆∞∆°ng t√°c, kh·ªüi t·∫°o s·ªë d∆∞ v√† t√™n (n·∫øu c√≥ th·ªÉ l·∫•y ƒë∆∞·ª£c)
            users_data[target_user_id] = {'balance': 0, 'username': f"Ng∆∞·ªùi d√πng {target_user_id}"} 
            # ƒê·ªÉ l·∫•y username ch√≠nh x√°c, bot ph·∫£i t·ª´ng nh√¨n th·∫•y user ƒë√≥ trong nh√≥m ho·∫∑c chat ri√™ng
        
        users_data[target_user_id]['balance'] += amount
        await update.message.reply_text(
            f"ƒê√£ c·ªông {amount:,} VNƒê v√†o t√†i kho·∫£n ng∆∞·ªùi d√πng ID: {target_user_id}.\n"
            f"S·ªë d∆∞ hi·ªán t·∫°i c·ªßa h·ªç: {users_data[target_user_id]['balance']:,} VNƒê"
        )
    except ValueError:
        await update.message.reply_text("ID ng∆∞·ªùi d√πng ho·∫∑c s·ªë ti·ªÅn kh√¥ng h·ª£p l·ªá.")

# --- L·ªánh ADMIN (TR√äN BOT RI√äNG): Tr·ª´ ti·ªÅn c·ªßa user ---
async def admin_remove_balance(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if not is_admin(update.effective_user.id) or update.effective_chat.type != "private":
        await update.message.reply_text("L·ªánh n√†y ch·ªâ d√†nh cho Admin v√† ch·ªâ s·ª≠ d·ª•ng trong chat ri√™ng v·ªõi bot.")
        return

    args = context.args
    if len(args) != 2:
        await update.message.reply_text("C√∫ ph√°p: /adminrmvxu [user_id] [s·ªë ti·ªÅn]")
        return
    try:
        target_user_id = int(args[0])
        amount = int(args[1])
        if amount <= 0:
            await update.message.reply_text("S·ªë ti·ªÅn ph·∫£i l·ªõn h∆°n 0.")
            return

        if target_user_id not in users_data:
            await update.message.reply_text(f"Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng v·ªõi ID: {target_user_id}.")
            return

        if users_data[target_user_id]['balance'] < amount:
            await update.message.reply_text(f"Ng∆∞·ªùi d√πng ID {target_user_id} kh√¥ng ƒë·ªß s·ªë d∆∞ ƒë·ªÉ tr·ª´ (c√≤n {users_data[target_user_id]['balance']:,} VNƒê).")
            return

        users_data[target_user_id]['balance'] -= amount
        await update.message.reply_text(
            f"ƒê√£ tr·ª´ {amount:,} VNƒê kh·ªèi t√†i kho·∫£n ng∆∞·ªùi d√πng ID: {target_user_id}.\n"
            f"S·ªë d∆∞ hi·ªán t·∫°i c·ªßa h·ªç: {users_data[target_user_id]['balance']:,} VNƒê"
        )
    except ValueError:
        await update.message.reply_text("ID ng∆∞·ªùi d√πng ho·∫∑c s·ªë ti·ªÅn kh√¥ng h·ª£p l·ªá.")


# --- Main function ƒë·ªÉ ch·∫°y bot ---
def main() -> None:
    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()

    # Handlers cho ng∆∞·ªùi d√πng (trong nh√≥m)
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("balance", balance))
    application.add_handler(CommandHandler("tai", cmd_tai))
    application.add_handler(CommandHandler("xiu", cmd_xiu))

    # Handlers cho ADMIN (trong nh√≥m)
    application.add_handler(CommandHandler("adminphienmoi", admin_start_session, filters=filters.ChatType.GROUPS))
    application.add_handler(CommandHandler("adminendphien", admin_end_session_manual, filters=filters.ChatType.GROUPS))
    
    # Handlers cho ADMIN (trong chat ri√™ng v·ªõi bot)
    application.add_handler(CommandHandler("admintung", admin_override_dice, filters=filters.ChatType.PRIVATE))
    application.add_handler(CommandHandler("adminaddxu", admin_add_balance, filters=filters.ChatType.PRIVATE))
    application.add_handler(CommandHandler("adminrmvxu", admin_remove_balance, filters=filters.ChatType.PRIVATE))
    application.add_handler(CommandHandler("adminlastsession", admin_last_session_info, filters=filters.ChatType.PRIVATE))


    # Ch·∫°y bot
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == "__main__":
    # Kh·ªüi t·∫°o m·ªôt s·ªë d·ªØ li·ªáu ban ƒë·∫ßu cho admin ƒë·ªÉ test
    for admin_id in ADMIN_IDS:
        if admin_id not in users_data:
            users_data[admin_id] = {'balance': 9999999999999, 'username': f"Admin_{admin_id}"}
    main()

